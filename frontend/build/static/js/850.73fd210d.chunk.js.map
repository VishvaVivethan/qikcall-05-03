{"version":3,"file":"static/js/850.73fd210d.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/form/CFormRange.tsx","views/forms/range/Range.js","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx"],"sourcesContent":["import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormLabel } from './CFormLabel'\nexport interface CFormRangeProps extends InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Add a caption for a component.\n   *\n   * @since 4.2.0\n   */\n  label?: ReactNode | string\n  /**\n   * Specifies the maximum value for the component.\n   */\n  max?: number\n  /**\n   * Specifies the minimum value for the component.\n   */\n  min?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Specifies the interval between legal numbers in the component.\n   */\n  step?: number\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormRange = forwardRef<HTMLInputElement, CFormRangeProps>(\n  ({ className, label, ...rest }, ref) => {\n    return (\n      <>\n        {label && <CFormLabel htmlFor={rest.id}>{label}</CFormLabel>}\n        <input type=\"range\" className={classNames('form-range', className)} {...rest} ref={ref} />\n      </>\n    )\n  },\n)\n\nCFormRange.propTypes = {\n  className: PropTypes.string,\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n}\n\nCFormRange.displayName = 'CFormRange'\n","import React from 'react'\r\nimport { CCard, CCardBody, CCardHeader, CCol, CFormLabel, CFormRange, CRow } from '@coreui/react'\r\nimport { DocsExample } from '../../../components'\r\n\r\nconst Range = () => {\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Range</strong> <small></small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Create custom <code>&lt;input type=&#34;range&#34;&gt;</code> controls with{' '}\r\n              <code>&lt;CFormRange&gt;</code>.\r\n            </p>\r\n            <DocsExample href=\"forms/range\" tabContentClassName=\"bg-opacity-10\">\r\n              <CFormLabel htmlFor=\"customRange1\">Example range</CFormLabel>\r\n              <CFormRange id=\"customRange1\" />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Range</strong> <small>Disabled</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Add the <code>disabled</code> boolean attribute on an input to give it a grayed out\r\n              appearance and remove pointer events.\r\n            </p>\r\n            <DocsExample href=\"forms/range#disabled\" tabContentClassName=\"bg-opacity-10\">\r\n              <CFormLabel htmlFor=\"disabledRange\">Disabled range</CFormLabel>\r\n              <CFormRange id=\"disabledRange\" disabled />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Range</strong> <small>Min and max</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Range inputs have implicit values for <code>min</code> and <code>max</code>â€”\r\n              <code>0</code> and <code>100</code>, respectively. You may specify new values for\r\n              those using the <code>min</code> and <code>max</code> attributes.\r\n            </p>\r\n            <DocsExample href=\"forms/range#min-and-max\" tabContentClassName=\"bg-opacity-10\">\r\n              <CFormLabel htmlFor=\"customRange2\">Example range</CFormLabel>\r\n              <CFormRange min={0} max={5} defaultValue=\"3\" id=\"customRange2\" />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Range</strong> <small>Steps</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              By default, range inputs &#34;snap&#34; to integer values. To change this, you can\r\n              specify a <code>step</code> value. In the example below, we double the number of steps\r\n              by using <code>step=&#34;0.5&#34;</code>.\r\n            </p>\r\n            <DocsExample href=\"forms/range#steps\" tabContentClassName=\"bg-opacity-10\">\r\n              <CFormLabel htmlFor=\"customRange3\">Example range</CFormLabel>\r\n              <CFormRange min={0} max={5} step={0.5} defaultValue=\"3\" id=\"customRange3\" />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Range\r\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n"],"names":["CFormRange","forwardRef","_a","ref","className","label","rest","__rest","React","CFormLabel","htmlFor","id","__assign","type","classNames","propTypes","PropTypes","displayName","Range","_jsxs","CRow","children","_jsx","CCol","xs","CCard","CCardHeader","CCardBody","DocsExample","href","tabContentClassName","disabled","min","max","defaultValue","step","_b","as","Component"],"sourceRoot":""}