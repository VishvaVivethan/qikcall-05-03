{"version":3,"file":"static/js/724.14fdfd47.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/alert/CAlert.tsx","../node_modules/@coreui/react/src/components/alert/CAlertLink.tsx","../node_modules/@coreui/react/src/components/alert/CAlertHeading.tsx","views/notifications/alerts/Alerts.js","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/close-button/CCloseButton.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useEffect, useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\n\nimport { useForkedRef } from '../../hooks'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CAlertProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color: Colors\n  /**\n   * Optionally add a close button to alert and allow it to self dismiss.\n   */\n  dismissible?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Set the alert variant to a solid.\n   */\n  variant?: 'solid' | string\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CAlert = forwardRef<HTMLDivElement, CAlertProps>(\n  (\n    {\n      children,\n      className,\n      color = 'primary',\n      dismissible,\n      variant,\n      visible = true,\n      onClose,\n      ...rest\n    },\n    ref,\n  ) => {\n    const alertRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, alertRef)\n    const [_visible, setVisible] = useState(visible)\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    return (\n      <Transition\n        in={_visible}\n        mountOnEnter\n        nodeRef={alertRef}\n        onExit={onClose}\n        timeout={150}\n        unmountOnExit\n      >\n        {(state) => (\n          <div\n            className={classNames(\n              'alert',\n              variant === 'solid' ? `bg-${color} text-white` : `alert-${color}`,\n              {\n                'alert-dismissible fade': dismissible,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            role=\"alert\"\n            {...rest}\n            ref={forkedRef}\n          >\n            {children}\n            {dismissible && <CCloseButton onClick={() => setVisible(false)} />}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCAlert.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType.isRequired,\n  dismissible: PropTypes.bool,\n  onClose: PropTypes.func,\n  variant: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nCAlert.displayName = 'CAlert'\n","import React, { AnchorHTMLAttributes, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CLink } from '../link/CLink'\n\nexport interface CAlertLinkProps extends AnchorHTMLAttributes<HTMLAnchorElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CAlertLink = forwardRef<HTMLAnchorElement, CAlertLinkProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <CLink className={classNames('alert-link', className)} {...rest} ref={ref}>\n        {children}\n      </CLink>\n    )\n  },\n)\n\nCAlertLink.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCAlertLink.displayName = 'CAlertLink'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CAlertHeadingProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CAlertHeading: PolymorphicRefForwardingComponent<'h4', CAlertHeadingProps> =\n  forwardRef<HTMLHeadingElement, CAlertHeadingProps>(\n    ({ children, as: Component = 'h4', className, ...rest }, ref) => {\n      return (\n        <Component className={classNames('alert-heading', className)} {...rest} ref={ref}>\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCAlertHeading.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCAlertHeading.displayName = 'CAlertHeading'\n","import React from 'react'\r\nimport {\r\n  CAlert,\r\n  CAlertHeading,\r\n  CAlertLink,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n} from '@coreui/react'\r\nimport { DocsExample } from '../../../components'\r\n\r\nconst Alerts = () => {\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Alert</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              React Alert is prepared for any length of text, as well as an optional close button.\r\n              For a styling, use one of the <strong>required</strong> contextual <code>color</code>{' '}\r\n              props (e.g., <code>primary</code>). For inline dismissal, use the{' '}\r\n              <a href=\"https://coreui.io/react/docs/components/alert#dismissing\">dismissing prop</a>\r\n              .\r\n            </p>\r\n            <DocsExample href=\"components/alert\">\r\n              <CAlert color=\"primary\">A simple primary alertâ€”check it out!</CAlert>\r\n              <CAlert color=\"secondary\">A simple secondary alertâ€”check it out!</CAlert>\r\n              <CAlert color=\"success\">A simple success alertâ€”check it out!</CAlert>\r\n              <CAlert color=\"danger\">A simple danger alertâ€”check it out!</CAlert>\r\n              <CAlert color=\"warning\">A simple warning alertâ€”check it out!</CAlert>\r\n              <CAlert color=\"info\">A simple info alertâ€”check it out!</CAlert>\r\n              <CAlert color=\"light\">A simple light alertâ€”check it out!</CAlert>\r\n              <CAlert color=\"dark\">A simple dark alertâ€”check it out!</CAlert>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Alert</strong> <small>Link color</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Use the <code>&lt;CAlertLink&gt;</code> component to immediately give matching colored\r\n              links inside any alert.\r\n            </p>\r\n            <DocsExample href=\"components/alert#link-color\">\r\n              <CAlert color=\"primary\">\r\n                A simple primary alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give\r\n                it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"secondary\">\r\n                A simple secondary alert with <CAlertLink href=\"#\">an example link</CAlertLink>.\r\n                Give it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"success\">\r\n                A simple success alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give\r\n                it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"danger\">\r\n                A simple danger alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give\r\n                it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"warning\">\r\n                A simple warning alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give\r\n                it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"info\">\r\n                A simple info alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give it\r\n                a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"light\">\r\n                A simple light alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give it\r\n                a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"dark\">\r\n                A simple dark alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give it\r\n                a click if you like.\r\n              </CAlert>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Alert</strong> <small>Additional content</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Alert can also incorporate supplementary components &amp; elements like heading,\r\n              paragraph, and divider.\r\n            </p>\r\n            <DocsExample href=\"components/alert#additional-content\">\r\n              <CAlert color=\"success\">\r\n                <CAlertHeading as=\"h4\">Well done!</CAlertHeading>\r\n                <p>\r\n                  Aww yeah, you successfully read this important alert message. This example text is\r\n                  going to run a bit longer so that you can see how spacing within an alert works\r\n                  with this kind of content.\r\n                </p>\r\n                <hr />\r\n                <p className=\"mb-0\">\r\n                  Whenever you need to, be sure to use margin utilities to keep things nice and\r\n                  tidy.\r\n                </p>\r\n              </CAlert>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Alert</strong> <small>Dismissing</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Alerts can also be easily dismissed. Just add the <code>dismissible</code> prop.\r\n            </p>\r\n            <DocsExample href=\"components/alert#dismissing\">\r\n              <CAlert\r\n                color=\"warning\"\r\n                dismissible\r\n                onClose={() => {\r\n                  alert('ðŸ‘‹ Well, hi there! Thanks for dismissing me.')\r\n                }}\r\n              >\r\n                <strong>Go right ahead</strong> and click that dimiss over there on the right.\r\n              </CAlert>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Alerts\r\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCloseButtonProps extends HTMLAttributes<HTMLButtonElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Invert the default color.\n   */\n  dark?: boolean\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Change the default color to white.\n   *\n   * @deprecated 5.0.0\n   */\n  white?: boolean\n}\n\nexport const CCloseButton = forwardRef<HTMLButtonElement, CCloseButtonProps>(\n  ({ className, dark, disabled, white, ...rest }, ref) => {\n    return (\n      <button\n        type=\"button\"\n        className={classNames(\n          'btn',\n          'btn-close',\n          {\n            'btn-close-white': white,\n          },\n          disabled,\n          className,\n        )}\n        aria-label=\"Close\"\n        disabled={disabled}\n        {...(dark && { 'data-coreui-theme': 'dark' })}\n        {...rest}\n        ref={ref}\n      />\n    )\n  },\n)\n\nCCloseButton.propTypes = {\n  className: PropTypes.string,\n  dark: PropTypes.bool,\n  disabled: PropTypes.bool,\n  white: PropTypes.bool,\n}\n\nCCloseButton.displayName = 'CCloseButton'\n"],"names":["CAlert","forwardRef","_a","ref","children","className","_b","color","dismissible","variant","_c","visible","onClose","rest","__rest","alertRef","useRef","forkedRef","useForkedRef","_d","useState","_visible","setVisible","useEffect","React","Transition","in","mountOnEnter","nodeRef","onExit","timeout","unmountOnExit","state","__assign","classNames","concat","show","role","CCloseButton","onClick","propTypes","PropTypes","colorPropType","isRequired","displayName","CAlertLink","CLink","CAlertHeading","as","Component","Alerts","_jsxs","CRow","_jsx","CCol","xs","CCard","CCardHeader","CCardBody","href","DocsExample","alert","dark","disabled","white","type"],"sourceRoot":""}