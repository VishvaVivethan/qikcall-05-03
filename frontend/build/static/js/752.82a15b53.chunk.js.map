{"version":3,"file":"static/js/752.82a15b53.chunk.js","mappings":"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","sources":["views/forms/layout/Layout.js","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx"],"sourcesContent":["import React from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CForm,\r\n  CFormCheck,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormSelect,\r\n  CInputGroup,\r\n  CInputGroupText,\r\n  CRow,\r\n} from '@coreui/react'\r\nimport { DocsExample } from '../../../components'\r\n\r\nconst Layout = () => {\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>Layout</strong> <small>Form grid</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              More complex forms can be built using our grid classes. Use these for form layouts\r\n              that require multiple columns, varied widths, and additional alignment options.\r\n            </p>\r\n            <DocsExample href=\"forms/layout#form-grid\">\r\n              <CRow>\r\n                <CCol xs>\r\n                  <CFormInput placeholder=\"First name\" aria-label=\"First name\" />\r\n                </CCol>\r\n                <CCol xs>\r\n                  <CFormInput placeholder=\"Last name\" aria-label=\"Last name\" />\r\n                </CCol>\r\n              </CRow>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>Layout</strong> <small>Gutters</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              By adding <a href=\"https://coreui.io/docs/layout/gutters/\">gutter modifier classes</a>\r\n              , you can have control over the gutter width in as well the inline as block direction.\r\n            </p>\r\n            <DocsExample href=\"forms/layout#gutters\">\r\n              <CRow className=\"g-3\">\r\n                <CCol xs>\r\n                  <CFormInput placeholder=\"First name\" aria-label=\"First name\" />\r\n                </CCol>\r\n                <CCol xs>\r\n                  <CFormInput placeholder=\"Last name\" aria-label=\"Last name\" />\r\n                </CCol>\r\n              </CRow>\r\n            </DocsExample>\r\n            <p className=\"text-body-secondary small\">\r\n              More complex layouts can also be created with the grid system.\r\n            </p>\r\n            <DocsExample href=\"forms/layout#gutters\">\r\n              <CForm className=\"row g-3\">\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"inputEmail4\">Email</CFormLabel>\r\n                  <CFormInput type=\"email\" id=\"inputEmail4\" />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"inputPassword4\">Password</CFormLabel>\r\n                  <CFormInput type=\"password\" id=\"inputPassword4\" />\r\n                </CCol>\r\n                <CCol xs={12}>\r\n                  <CFormLabel htmlFor=\"inputAddress\">Address</CFormLabel>\r\n                  <CFormInput id=\"inputAddress\" placeholder=\"1234 Main St\" />\r\n                </CCol>\r\n                <CCol xs={12}>\r\n                  <CFormLabel htmlFor=\"inputAddress2\">Address 2</CFormLabel>\r\n                  <CFormInput id=\"inputAddress2\" placeholder=\"Apartment, studio, or floor\" />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"inputCity\">City</CFormLabel>\r\n                  <CFormInput id=\"inputCity\" />\r\n                </CCol>\r\n                <CCol md={4}>\r\n                  <CFormLabel htmlFor=\"inputState\">State</CFormLabel>\r\n                  <CFormSelect id=\"inputState\">\r\n                    <option>Choose...</option>\r\n                    <option>...</option>\r\n                  </CFormSelect>\r\n                </CCol>\r\n                <CCol md={2}>\r\n                  <CFormLabel htmlFor=\"inputZip\">Zip</CFormLabel>\r\n                  <CFormInput id=\"inputZip\" />\r\n                </CCol>\r\n                <CCol xs={12}>\r\n                  <CFormCheck type=\"checkbox\" id=\"gridCheck\" label=\"Check me out\" />\r\n                </CCol>\r\n                <CCol xs={12}>\r\n                  <CButton color=\"primary\" type=\"submit\">\r\n                    Sign in\r\n                  </CButton>\r\n                </CCol>\r\n              </CForm>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>Layout</strong> <small>Horizontal form</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Create horizontal forms with the grid by adding the <code>.row</code> class to form\r\n              groups and using the <code>.col-*-*</code> classes to specify the width of your labels\r\n              and controls. Be sure to add <code>.col-form-label</code> to your{' '}\r\n              <code>&lt;CFormLabel&gt;</code>s as well so they&#39;re vertically centered with their\r\n              associated form controls.\r\n            </p>\r\n            <p className=\"text-body-secondary small\">\r\n              At times, you maybe need to use margin or padding utilities to create that perfect\r\n              alignment you need. For example, we&#39;ve removed the <code>padding-top</code> on our\r\n              stacked radio inputs label to better align the text baseline.\r\n            </p>\r\n            <DocsExample href=\"forms/layout#horizontal-form\">\r\n              <CForm>\r\n                <CRow className=\"mb-3\">\r\n                  <CFormLabel htmlFor=\"inputEmail3\" className=\"col-sm-2 col-form-label\">\r\n                    Email\r\n                  </CFormLabel>\r\n                  <CCol sm={10}>\r\n                    <CFormInput type=\"email\" id=\"inputEmail3\" />\r\n                  </CCol>\r\n                </CRow>\r\n                <CRow className=\"mb-3\">\r\n                  <CFormLabel htmlFor=\"inputPassword3\" className=\"col-sm-2 col-form-label\">\r\n                    Password\r\n                  </CFormLabel>\r\n                  <CCol sm={10}>\r\n                    <CFormInput type=\"password\" id=\"inputPassword3\" />\r\n                  </CCol>\r\n                </CRow>\r\n                <fieldset className=\"row mb-3\">\r\n                  <legend className=\"col-form-label col-sm-2 pt-0\">Radios</legend>\r\n                  <CCol sm={10}>\r\n                    <CFormCheck\r\n                      type=\"radio\"\r\n                      name=\"gridRadios\"\r\n                      id=\"gridRadios1\"\r\n                      value=\"option1\"\r\n                      label=\"First radio\"\r\n                      defaultChecked\r\n                    />\r\n                    <CFormCheck\r\n                      type=\"radio\"\r\n                      name=\"gridRadios\"\r\n                      id=\"gridRadios2\"\r\n                      value=\"option2\"\r\n                      label=\"Second radio\"\r\n                    />\r\n                    <CFormCheck\r\n                      type=\"radio\"\r\n                      name=\"gridRadios\"\r\n                      id=\"gridRadios3\"\r\n                      value=\"option3\"\r\n                      label=\"Third disabled radio\"\r\n                      disabled\r\n                    />\r\n                  </CCol>\r\n                </fieldset>\r\n                <CRow className=\"mb-3\">\r\n                  <div className=\"col-sm-10 offset-sm-2\">\r\n                    <CFormCheck type=\"checkbox\" id=\"gridCheck1\" label=\"Example checkbox\" />\r\n                  </div>\r\n                </CRow>\r\n                <CButton color=\"primary\" type=\"submit\">\r\n                  Sign in\r\n                </CButton>\r\n              </CForm>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>Layout</strong> <small>Horizontal form label sizing</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Be sure to use <code>.col-form-label-sm</code> or <code>.col-form-label-lg</code> to\r\n              your <code>&lt;CFormLabel&gt;</code>s or <code>&lt;legend&gt;</code>s to correctly\r\n              follow the size of <code>.form-control-lg</code> and <code>.form-control-sm</code>.\r\n            </p>\r\n            <DocsExample href=\"forms/layout#horizontal-form-label-sizing\">\r\n              <CRow className=\"mb-3\">\r\n                <CFormLabel\r\n                  htmlFor=\"colFormLabelSm\"\r\n                  className=\"col-sm-2 col-form-label col-form-label-sm\"\r\n                >\r\n                  Email\r\n                </CFormLabel>\r\n                <CCol sm={10}>\r\n                  <CFormInput\r\n                    type=\"email\"\r\n                    className=\"form-control form-control-sm\"\r\n                    id=\"colFormLabelSm\"\r\n                    placeholder=\"col-form-label-sm\"\r\n                  />\r\n                </CCol>\r\n              </CRow>\r\n              <CRow className=\"mb-3\">\r\n                <CFormLabel htmlFor=\"colFormLabel\" className=\"col-sm-2 col-form-label\">\r\n                  Email\r\n                </CFormLabel>\r\n                <CCol sm={10}>\r\n                  <CFormInput type=\"email\" id=\"colFormLabel\" placeholder=\"col-form-label\" />\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"colFormLabelLg\"\r\n                  className=\"col-sm-2 col-form-label col-form-label-lg\"\r\n                >\r\n                  Email\r\n                </CFormLabel>\r\n                <CCol sm={10}>\r\n                  <CFormInput\r\n                    type=\"email\"\r\n                    className=\"form-control form-control-lg\"\r\n                    id=\"colFormLabelLg\"\r\n                    placeholder=\"col-form-label-lg\"\r\n                  />\r\n                </CCol>\r\n              </CRow>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>Layout</strong> <small>Column sizing</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              As shown in the previous examples, our grid system allows you to place any number of{' '}\r\n              <code>&lt;CCol&gt;</code>s within a <code>&lt;CRow&gt;</code>. They&#39;ll split the\r\n              available width equally between them. You may also pick a subset of your columns to\r\n              take up more or less space, while the remaining <code>&lt;CCol&gt;</code>s equally\r\n              split the rest, with specific column classes like{' '}\r\n              <code>&lt;CCol sm=&#34;7&#34;&gt;</code>.\r\n            </p>\r\n            <DocsExample href=\"forms/layout#column-sizing\">\r\n              <CRow className=\"g-3\">\r\n                <CCol sm={7}>\r\n                  <CFormInput placeholder=\"City\" aria-label=\"City\" />\r\n                </CCol>\r\n                <CCol sm>\r\n                  <CFormInput placeholder=\"State\" aria-label=\"State\" />\r\n                </CCol>\r\n                <CCol sm>\r\n                  <CFormInput placeholder=\"Zip\" aria-label=\"Zip\" />\r\n                </CCol>\r\n              </CRow>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>Layout</strong> <small>Auto-sizing</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              The example below uses a flexbox utility to vertically center the contents and changes{' '}\r\n              <code>&lt;CCol&gt;</code> to <code>&lt;CCol xs=&#34;auto&#34;&gt;</code> so that your\r\n              columns only take up as much space as needed. Put another way, the column sizes itself\r\n              based on the contents.\r\n            </p>\r\n            <DocsExample href=\"forms/layout#auto-sizing\">\r\n              <CForm className=\"row gy-2 gx-3 align-items-center\">\r\n                <CCol xs=\"auto\">\r\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"autoSizingInput\">\r\n                    Name\r\n                  </CFormLabel>\r\n                  <CFormInput id=\"autoSizingInput\" placeholder=\"Jane Doe\" />\r\n                </CCol>\r\n                <CCol xs=\"auto\">\r\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"autoSizingInputGroup\">\r\n                    Username\r\n                  </CFormLabel>\r\n                  <CInputGroup>\r\n                    <CInputGroupText>@</CInputGroupText>\r\n                    <CFormInput id=\"autoSizingInputGroup\" placeholder=\"Username\" />\r\n                  </CInputGroup>\r\n                </CCol>\r\n                <CCol xs=\"auto\">\r\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"autoSizingSelect\">\r\n                    Preference\r\n                  </CFormLabel>\r\n                  <CFormSelect id=\"autoSizingSelect\">\r\n                    <option>Choose...</option>\r\n                    <option value=\"1\">One</option>\r\n                    <option value=\"2\">Two</option>\r\n                    <option value=\"3\">Three</option>\r\n                  </CFormSelect>\r\n                </CCol>\r\n                <CCol xs=\"auto\">\r\n                  <CFormCheck type=\"checkbox\" id=\"autoSizingCheck\" label=\"Remember me\" />\r\n                </CCol>\r\n                <CCol xs=\"auto\">\r\n                  <CButton color=\"primary\" type=\"submit\">\r\n                    Submit\r\n                  </CButton>\r\n                </CCol>\r\n              </CForm>\r\n            </DocsExample>\r\n            <p className=\"text-body-secondary small\">\r\n              You can then remix that once again with size-specific column classes.\r\n            </p>\r\n            <DocsExample href=\"forms/layout#auto-sizing\">\r\n              <CForm className=\"row gx-3 gy-2 align-items-center\">\r\n                <CCol sm={3}>\r\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"specificSizeInputName\">\r\n                    Name\r\n                  </CFormLabel>\r\n                  <CFormInput id=\"specificSizeInputName\" placeholder=\"Jane Doe\" />\r\n                </CCol>\r\n                <CCol sm={3}>\r\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"specificSizeInputGroupUsername\">\r\n                    Username\r\n                  </CFormLabel>\r\n                  <CInputGroup>\r\n                    <CInputGroupText>@</CInputGroupText>\r\n                    <CFormInput id=\"specificSizeInputGroupUsername\" placeholder=\"Username\" />\r\n                  </CInputGroup>\r\n                </CCol>\r\n                <CCol sm={3}>\r\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"specificSizeSelect\">\r\n                    Preference\r\n                  </CFormLabel>\r\n                  <CFormSelect id=\"specificSizeSelect\">\r\n                    <option>Choose...</option>\r\n                    <option value=\"1\">One</option>\r\n                    <option value=\"2\">Two</option>\r\n                    <option value=\"3\">Three</option>\r\n                  </CFormSelect>\r\n                </CCol>\r\n                <CCol xs=\"auto\">\r\n                  <CFormCheck type=\"checkbox\" id=\"autoSizingCheck2\" label=\"Remember me\" />\r\n                </CCol>\r\n                <CCol xs=\"auto\">\r\n                  <CButton color=\"primary\" type=\"submit\">\r\n                    Submit\r\n                  </CButton>\r\n                </CCol>\r\n              </CForm>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>Layout</strong> <small>Inline forms</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Use the <code>&lt;CCol xs=&#34;auto&#34;&gt;</code> class to create horizontal\r\n              layouts. By adding{' '}\r\n              <a href=\"https://coreui.io/docs/layout/gutters/\">gutter modifier classes</a>, we will\r\n              have gutters in horizontal and vertical directions. The{' '}\r\n              <code>.align-items-center</code> aligns the form elements to the middle, making the{' '}\r\n              <code>&lt;CFormCheck&gt;</code> align properly.\r\n            </p>\r\n            <DocsExample href=\"forms/layout#inline-forms\">\r\n              <CForm className=\"row row-cols-lg-auto g-3 align-items-center\">\r\n                <CCol xs={12}>\r\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"inlineFormInputGroupUsername\">\r\n                    Username\r\n                  </CFormLabel>\r\n                  <CInputGroup>\r\n                    <CInputGroupText>@</CInputGroupText>\r\n                    <CFormInput id=\"inlineFormInputGroupUsername\" placeholder=\"Username\" />\r\n                  </CInputGroup>\r\n                </CCol>\r\n                <CCol xs={12}>\r\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"inlineFormSelectPref\">\r\n                    Preference\r\n                  </CFormLabel>\r\n                  <CFormSelect id=\"inlineFormSelectPref\">\r\n                    <option>Choose...</option>\r\n                    <option value=\"1\">One</option>\r\n                    <option value=\"2\">Two</option>\r\n                    <option value=\"3\">Three</option>\r\n                  </CFormSelect>\r\n                </CCol>\r\n                <CCol xs={12}>\r\n                  <CFormCheck type=\"checkbox\" id=\"inlineFormCheck\" label=\"Remember me\" />\r\n                </CCol>\r\n                <CCol xs={12}>\r\n                  <CButton color=\"primary\" type=\"submit\">\r\n                    Submit\r\n                  </CButton>\r\n                </CCol>\r\n              </CForm>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n"],"names":["Layout","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","DocsExample","href","CFormInput","placeholder","CForm","md","CFormLabel","htmlFor","type","id","CFormSelect","CFormCheck","label","CButton","color","sm","name","value","defaultChecked","disabled","CInputGroup","CInputGroupText","forwardRef","_a","ref","_b","as","Component","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inline","invalid","reverse","valid","inputRef","useRef","forkedRef","useForkedRef","useEffect","current","FormControl","FormValidation","CFormControlValidation","describedby","FormLabel","customClassName","variant","concat","size","shape","floatingClassName","htmlSize","options","text","CFormControlWrapper","map","option","index","undefined","key"],"sourceRoot":""}