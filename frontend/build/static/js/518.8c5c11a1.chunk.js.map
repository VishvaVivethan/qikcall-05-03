{"version":3,"file":"static/js/518.8c5c11a1.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/form/CFormSwitch.tsx","views/forms/checks-radios/ChecksRadios.js","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx"],"sourcesContent":["import React, { forwardRef, InputHTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormLabel } from './CFormLabel'\n\nexport interface CFormSwitchProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put switch on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Size the component large or extra large. Works only with `switch`.\n   */\n  size?: 'lg' | 'xl'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormSwitch = forwardRef<HTMLInputElement, CFormSwitchProps>(\n  ({ className, id, invalid, label, reverse, size, type = 'checkbox', valid, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'form-check form-switch',\n          {\n            'form-check-reverse': reverse,\n            [`form-switch-${size}`]: size,\n            'is-invalid': invalid,\n            'is-valid': valid,\n          },\n          className,\n        )}\n      >\n        <input\n          type={type}\n          className={classNames('form-check-input', {\n            'is-invalid': invalid,\n            'is-valid': valid,\n          })}\n          id={id}\n          {...rest}\n          ref={ref}\n        />\n        {label && (\n          <CFormLabel customClassName=\"form-check-label\" {...(id && { htmlFor: id })}>\n            {label}\n          </CFormLabel>\n        )}\n      </div>\n    )\n  },\n)\n\nCFormSwitch.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  invalid: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  size: PropTypes.oneOf(['lg', 'xl']),\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  valid: PropTypes.bool,\n}\n\nCFormSwitch.displayName = 'CFormSwitch'\n","import React from 'react'\r\nimport { CCard, CCardBody, CCardHeader, CCol, CFormCheck, CFormSwitch, CRow } from '@coreui/react'\r\nimport { DocsExample } from '../../../components'\r\n\r\nconst ChecksRadios = () => {\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Checkbox</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <DocsExample href=\"forms/checks-radios\">\r\n              <CFormCheck id=\"flexCheckDefault\" label=\"Default checkbox\" />\r\n              <CFormCheck id=\"flexCheckChecked\" label=\"Checked checkbox\" defaultChecked />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Checkbox</strong> <small>Disabled</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Add the <code>disabled</code> attribute and the associated <code>&lt;label&gt;</code>s\r\n              are automatically styled to match with a lighter color to help indicate the\r\n              input&#39;s state.\r\n            </p>\r\n            <DocsExample href=\"forms/checks-radios#disabled\">\r\n              <CFormCheck label=\"Disabled checkbox\" disabled />\r\n              <CFormCheck label=\"Disabled checked checkbox\" defaultChecked disabled />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Radio</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Add the <code>disabled</code> attribute and the associated <code>&lt;label&gt;</code>s\r\n              are automatically styled to match with a lighter color to help indicate the\r\n              input&#39;s state.\r\n            </p>\r\n            <DocsExample href=\"forms/checks-radios#radios\">\r\n              <CFormCheck\r\n                type=\"radio\"\r\n                name=\"flexRadioDefault\"\r\n                id=\"flexRadioDefault1\"\r\n                label=\"Default radio\"\r\n              />\r\n              <CFormCheck\r\n                type=\"radio\"\r\n                name=\"flexRadioDefault\"\r\n                id=\"flexRadioDefault2\"\r\n                label=\"Checked radio\"\r\n                defaultChecked\r\n              />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Radio</strong> <small>Disabled</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <DocsExample href=\"forms/checks-radios#disabled-1\">\r\n              <CFormCheck\r\n                type=\"radio\"\r\n                name=\"flexRadioDisabled\"\r\n                id=\"flexRadioDisabled\"\r\n                label=\"Disabled radio\"\r\n                disabled\r\n              />\r\n              <CFormCheck\r\n                type=\"radio\"\r\n                name=\"flexRadioDisabled\"\r\n                id=\"flexRadioCheckedDisabled\"\r\n                label=\"Disabled checked radio\"\r\n                defaultChecked\r\n                disabled\r\n              />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Switches</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              A switch has the markup of a custom checkbox but uses the <code>switch</code> boolean\r\n              properly to render a toggle switch. Switches also support the <code>disabled</code>{' '}\r\n              attribute.\r\n            </p>\r\n            <DocsExample href=\"forms/checks-radios#switches\">\r\n              <CFormSwitch label=\"Default switch checkbox input\" id=\"formSwitchCheckDefault\" />\r\n              <CFormSwitch\r\n                label=\"Checked switch checkbox input\"\r\n                id=\"formSwitchCheckChecked\"\r\n                defaultChecked\r\n              />\r\n              <CFormSwitch\r\n                label=\"Disabled switch checkbox input\"\r\n                id=\"formSwitchCheckDisabled\"\r\n                disabled\r\n              />\r\n              <CFormSwitch\r\n                label=\"Disabled checked switch checkbox input\"\r\n                id=\"formSwitchCheckCheckedDisabled\"\r\n                defaultChecked\r\n                disabled\r\n              />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Switches</strong> <small>Sizes</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <DocsExample href=\"forms/checks-radios#sizes\">\r\n              <CFormSwitch label=\"Default switch checkbox input\" id=\"formSwitchCheckDefault\" />\r\n              <CFormSwitch\r\n                size=\"lg\"\r\n                label=\"Large switch checkbox input\"\r\n                id=\"formSwitchCheckDefaultLg\"\r\n              />\r\n              <CFormSwitch\r\n                size=\"xl\"\r\n                label=\"Extra large switch checkbox input\"\r\n                id=\"formSwitchCheckDefaultXL\"\r\n              />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Checks and Radios</strong> <small>Default layout (stacked)</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              By default, any number of checkboxes and radios that are immediate sibling will be\r\n              vertically stacked and appropriately spaced.\r\n            </p>\r\n            <DocsExample href=\"forms/checks-radios#default-stacked\">\r\n              <CFormCheck id=\"defaultCheck1\" label=\"Default checkbox\" />\r\n              <CFormCheck id=\"defaultCheck2\" label=\"Disabled checkbox\" disabled />\r\n            </DocsExample>\r\n            <DocsExample href=\"forms/checks-radios#default-stacked\">\r\n              <CFormCheck\r\n                type=\"radio\"\r\n                name=\"exampleRadios\"\r\n                id=\"exampleRadios1\"\r\n                value=\"option1\"\r\n                label=\"Default radio\"\r\n                defaultChecked\r\n              />\r\n              <CFormCheck\r\n                type=\"radio\"\r\n                name=\"exampleRadios\"\r\n                id=\"exampleRadios2\"\r\n                value=\"option2\"\r\n                label=\"Second default radio\"\r\n              />\r\n              <CFormCheck\r\n                type=\"radio\"\r\n                name=\"exampleRadios\"\r\n                id=\"exampleRadios3\"\r\n                value=\"option3\"\r\n                label=\"Disabled radio\"\r\n                disabled\r\n              />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Checks and Radios</strong> <small>Inline</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Group checkboxes or radios on the same horizontal row by adding <code>inline</code>{' '}\r\n              boolean property to any <code>&lt;CFormCheck&gt;</code>.\r\n            </p>\r\n            <DocsExample href=\"forms/checks-radios#inline\">\r\n              <CFormCheck inline id=\"inlineCheckbox1\" value=\"option1\" label=\"1\" />\r\n              <CFormCheck inline id=\"inlineCheckbox2\" value=\"option2\" label=\"2\" />\r\n              <CFormCheck\r\n                inline\r\n                id=\"inlineCheckbox3\"\r\n                value=\"option3\"\r\n                label=\"3 (disabled)\"\r\n                disabled\r\n              />\r\n            </DocsExample>\r\n            <DocsExample href=\"forms/checks-radios#inline\">\r\n              <CFormCheck\r\n                inline\r\n                type=\"radio\"\r\n                name=\"inlineRadioOptions\"\r\n                id=\"inlineCheckbox1\"\r\n                value=\"option1\"\r\n                label=\"1\"\r\n              />\r\n              <CFormCheck\r\n                inline\r\n                type=\"radio\"\r\n                name=\"inlineRadioOptions\"\r\n                id=\"inlineCheckbox2\"\r\n                value=\"option2\"\r\n                label=\"2\"\r\n              />\r\n              <CFormCheck\r\n                inline\r\n                type=\"radio\"\r\n                name=\"inlineRadioOptions\"\r\n                id=\"inlineCheckbox3\"\r\n                value=\"option3\"\r\n                label=\"3 (disabled)\"\r\n                disabled\r\n              />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Checks and Radios</strong> <small>Without labels</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Remember to still provide some form of accessible name for assistive technologies (for\r\n              instance, using <code>aria-label</code>).\r\n            </p>\r\n            <DocsExample href=\"forms/checks-radios#without-labels\">\r\n              <div>\r\n                <CFormCheck id=\"checkboxNoLabel\" value=\"\" aria-label=\"...\" />\r\n              </div>\r\n              <div>\r\n                <CFormCheck\r\n                  type=\"radio\"\r\n                  name=\"radioNoLabel\"\r\n                  id=\"radioNoLabel\"\r\n                  value=\"\"\r\n                  aria-label=\"...\"\r\n                />\r\n              </div>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>Toggle buttons</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Create button-like checkboxes and radio buttons by using <code>button</code> boolean\r\n              property on the <code>&lt;CFormCheck&gt;</code> component. These toggle buttons can\r\n              further be grouped in a button group if needed.\r\n            </p>\r\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\r\n              <CFormCheck\r\n                button={{ color: 'primary ' }}\r\n                id=\"btn-check\"\r\n                autoComplete=\"off\"\r\n                label=\"Single toggle\"\r\n              />\r\n            </DocsExample>\r\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\r\n              <CFormCheck\r\n                button={{ color: 'primary ' }}\r\n                id=\"btn-check-2\"\r\n                autoComplete=\"off\"\r\n                label=\"Checked\"\r\n                defaultChecked\r\n              />\r\n            </DocsExample>\r\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\r\n              <CFormCheck\r\n                button={{ color: 'primary ' }}\r\n                id=\"btn-check-3\"\r\n                autoComplete=\"off\"\r\n                label=\"Disabled\"\r\n                disabled\r\n              />\r\n            </DocsExample>\r\n            <h3>Radio toggle buttons</h3>\r\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\r\n              <CFormCheck\r\n                button={{ color: 'secondary' }}\r\n                type=\"radio\"\r\n                name=\"options\"\r\n                id=\"option1\"\r\n                autoComplete=\"off\"\r\n                label=\"Checked\"\r\n                defaultChecked\r\n              />\r\n              <CFormCheck\r\n                button={{ color: 'secondary' }}\r\n                type=\"radio\"\r\n                name=\"options\"\r\n                id=\"option2\"\r\n                autoComplete=\"off\"\r\n                label=\"Radio\"\r\n              />\r\n              <CFormCheck\r\n                button={{ color: 'secondary' }}\r\n                type=\"radio\"\r\n                name=\"options\"\r\n                id=\"option3\"\r\n                autoComplete=\"off\"\r\n                label=\"Radio\"\r\n                disabled\r\n              />\r\n              <CFormCheck\r\n                button={{ color: 'secondary' }}\r\n                type=\"radio\"\r\n                name=\"options\"\r\n                id=\"option4\"\r\n                autoComplete=\"off\"\r\n                label=\"Radio\"\r\n              />\r\n            </DocsExample>\r\n            <h3>Outlined styles</h3>\r\n            <p className=\"text-body-secondary small\">\r\n              Different variants of button, such at the various outlined styles, are supported.\r\n            </p>\r\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\r\n              <div>\r\n                <CFormCheck\r\n                  button={{ color: 'primary', variant: 'outline' }}\r\n                  id=\"btn-check-outlined\"\r\n                  autoComplete=\"off\"\r\n                  label=\"Single toggle\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <CFormCheck\r\n                  button={{ color: 'secondary', variant: 'outline' }}\r\n                  id=\"btn-check-2-outlined\"\r\n                  autoComplete=\"off\"\r\n                  label=\"Checked\"\r\n                  defaultChecked\r\n                />\r\n              </div>\r\n              <div>\r\n                <CFormCheck\r\n                  button={{ color: 'success', variant: 'outline' }}\r\n                  type=\"radio\"\r\n                  name=\"options-outlined\"\r\n                  id=\"success-outlined\"\r\n                  autoComplete=\"off\"\r\n                  label=\"Radio\"\r\n                  defaultChecked\r\n                />\r\n                <CFormCheck\r\n                  button={{ color: 'danger', variant: 'outline' }}\r\n                  type=\"radio\"\r\n                  name=\"options-outlined\"\r\n                  id=\"danger-outlined\"\r\n                  autoComplete=\"off\"\r\n                  label=\"Radio\"\r\n                />\r\n              </div>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default ChecksRadios\r\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n"],"names":["CFormSwitch","forwardRef","_a","ref","className","id","invalid","label","reverse","size","_c","type","valid","rest","__rest","React","classNames","_b","concat","__assign","CFormLabel","customClassName","htmlFor","propTypes","PropTypes","displayName","ChecksRadios","_jsxs","CRow","children","_jsx","CCol","xs","CCard","CCardHeader","CCardBody","DocsExample","href","CFormCheck","defaultChecked","disabled","name","value","inline","button","color","autoComplete","variant","as","Component","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inputRef","useRef","forkedRef","useForkedRef","useEffect","current","FormControl","FormValidation","CFormControlValidation","describedby","FormLabel","shape"],"sourceRoot":""}