{"version":3,"file":"static/js/171.56849457.chunk.js","mappings":"iRAeA,MA0JA,EA1JuBA,KAEnBC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAAC,SAAA,EACHC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,GAAGH,UACXF,EAAAA,EAAAA,MAACM,EAAAA,EAAK,CAACC,UAAU,OAAML,SAAA,EACrBC,EAAAA,EAAAA,KAACK,EAAAA,EAAW,CAAAN,UACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,6BAEVF,EAAAA,EAAAA,MAACS,EAAAA,EAAS,CAAAP,SAAA,EACRF,EAAAA,EAAAA,MAAA,KAAGO,UAAU,4BAA2BL,SAAA,CAAC,mBACxBC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAAyB,SAAKC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAA0B,IAAI,gBAC3EC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,kBAAoB,2DAC5BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gBAAkB,yBAAqBC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAA0B,IAAI,uDACxCC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,uBAA0B,IAAI,uCACpDC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAAyB,iEACzBC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,MAAQ,SAEzDF,EAAAA,EAAAA,MAACU,EAAAA,GAAW,CAACC,KAAK,wBAAuBT,SAAA,EACvCF,EAAAA,EAAAA,MAACY,EAAAA,EAAa,CAACL,UAAU,OAAML,SAAA,EAC7BC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,KAAK,QAAQC,GAAG,gBAAgBC,YAAY,sBACxDb,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAACC,QAAQ,gBAAehB,SAAC,sBAEtCF,EAAAA,EAAAA,MAACY,EAAAA,EAAa,CAAAV,SAAA,EACZC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,KAAK,WAAWC,GAAG,mBAAmBC,YAAY,cAC9Db,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAACC,QAAQ,mBAAkBhB,SAAC,oBAG3CF,EAAAA,EAAAA,MAAA,KAAGO,UAAU,4BAA2BL,SAAA,CAAC,mBACpBC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,UAAY,sBAAkBC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAAyB,6DAGxFC,EAAAA,EAAAA,KAACO,EAAAA,GAAW,CAACC,KAAK,wBAAuBT,UACvCF,EAAAA,EAAAA,MAACY,EAAAA,EAAa,CAAAV,SAAA,EACZC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CACTC,KAAK,QACLC,GAAG,qBACHC,YAAY,mBACZG,aAAa,sBAEfhB,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAACC,QAAQ,qBAAoBhB,SAAC,mCAMnDC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,GAAGH,UACXF,EAAAA,EAAAA,MAACM,EAAAA,EAAK,CAACC,UAAU,OAAML,SAAA,EACrBF,EAAAA,EAAAA,MAACQ,EAAAA,EAAW,CAAAN,SAAA,EACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,0BAA8B,KAACC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,kBAEhDF,EAAAA,EAAAA,MAACS,EAAAA,EAAS,CAAAP,SAAA,EACRF,EAAAA,EAAAA,MAAA,KAAGO,UAAU,4BAA2BL,SAAA,CAAC,gBAC3BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,oBAA4B,+BAA6B,KAC3EC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAAyB,SAEjCC,EAAAA,EAAAA,KAACO,EAAAA,GAAW,CAACC,KAAK,kCAAiCT,UACjDF,EAAAA,EAAAA,MAACY,EAAAA,EAAa,CAAAV,SAAA,EACZC,EAAAA,EAAAA,KAACiB,EAAAA,EAAa,CACZL,GAAG,mBACHC,YAAY,0BAEdb,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAACC,QAAQ,mBAAkBhB,SAAC,mBAG3CF,EAAAA,EAAAA,MAAA,KAAGO,UAAU,4BAA2BL,SAAA,CAAC,mCACRC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,qBAA8B,mBAAgB,KACnFC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,SAAW,yCAAqCC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,WAAa,0CAG3EC,EAAAA,EAAAA,KAACO,EAAAA,GAAW,CAACC,KAAK,kCAAiCT,UACjDF,EAAAA,EAAAA,MAACY,EAAAA,EAAa,CAAAV,SAAA,EACZC,EAAAA,EAAAA,KAACiB,EAAAA,EAAa,CACZJ,YAAY,uBACZD,GAAG,oBACHM,MAAO,CAAEC,OAAQ,YAEnBnB,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAACC,QAAQ,oBAAmBhB,SAAC,2BAMlDC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,GAAGH,UACXF,EAAAA,EAAAA,MAACM,EAAAA,EAAK,CAACC,UAAU,OAAML,SAAA,EACrBF,EAAAA,EAAAA,MAACQ,EAAAA,EAAW,CAAAN,SAAA,EACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,0BAA8B,KAACC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,gBAEhDF,EAAAA,EAAAA,MAACS,EAAAA,EAAS,CAAAP,SAAA,EACRF,EAAAA,EAAAA,MAAA,KAAGO,UAAU,4BAA2BL,SAAA,CAAC,eAC5BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAA0B,0CAAuC,KAClFC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,kBAA0B,2CAAyC,KACzEC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAAyB,6BAA+B,KAC9DC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAAyB,yBAAuB,KACtDF,EAAAA,EAAAA,MAAA,UAAAE,SAAA,CAAQ,iBACOC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,SAAW,SAAKC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,aAAe,6BAG5DC,EAAAA,EAAAA,KAACO,EAAAA,GAAW,CAACC,KAAK,gCAA+BT,UAC/CF,EAAAA,EAAAA,MAACY,EAAAA,EAAa,CAAAV,SAAA,EACZF,EAAAA,EAAAA,MAACuB,EAAAA,EAAW,CAACR,GAAG,iBAAiB,aAAW,gCAA+Bb,SAAA,EACzEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,2BACRC,EAAAA,EAAAA,KAAA,UAAQqB,MAAM,IAAGtB,SAAC,SAClBC,EAAAA,EAAAA,KAAA,UAAQqB,MAAM,IAAGtB,SAAC,SAClBC,EAAAA,EAAAA,KAAA,UAAQqB,MAAM,IAAGtB,SAAC,cAEpBC,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAACC,QAAQ,iBAAgBhB,SAAC,qCAM/CC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,GAAGH,UACXF,EAAAA,EAAAA,MAACM,EAAAA,EAAK,CAACC,UAAU,OAAML,SAAA,EACrBF,EAAAA,EAAAA,MAACQ,EAAAA,EAAW,CAAAN,SAAA,EACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,0BAA8B,KAACC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,eAEhDF,EAAAA,EAAAA,MAACS,EAAAA,EAAS,CAAAP,SAAA,EACRC,EAAAA,EAAAA,KAAA,KAAGI,UAAU,4BAA2BL,SAAC,mHAIzCC,EAAAA,EAAAA,KAACO,EAAAA,GAAW,CAACC,KAAK,+BAA8BT,UAC9CF,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACI,GAAI,CAAEoB,OAAQ,GAAIvB,SAAA,EACtBC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACsB,IAAE,EAAAxB,UACNF,EAAAA,EAAAA,MAACY,EAAAA,EAAa,CAAAV,SAAA,EACZC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CACTC,KAAK,QACLC,GAAG,oBACHC,YAAY,mBACZG,aAAa,uBAEfhB,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAACC,QAAQ,oBAAmBhB,SAAC,wBAG5CC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACsB,IAAE,EAAAxB,UACNF,EAAAA,EAAAA,MAACY,EAAAA,EAAa,CAAAV,SAAA,EACZF,EAAAA,EAAAA,MAACuB,EAAAA,EAAW,CAACR,GAAG,qBAAqB,aAAW,gCAA+Bb,SAAA,EAC7EC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,2BACRC,EAAAA,EAAAA,KAAA,UAAQqB,MAAM,IAAGtB,SAAC,SAClBC,EAAAA,EAAAA,KAAA,UAAQqB,MAAM,IAAGtB,SAAC,SAClBC,EAAAA,EAAAA,KAAA,UAAQqB,MAAM,IAAGtB,SAAC,cAEpBC,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAACC,QAAQ,qBAAoBhB,SAAC,2C,4FC5IhDM,GAA0EmB,EAAAA,EAAAA,aAGrF,SAACC,EAAyDC,GAAvD,IAAA3B,EAAQ0B,EAAA1B,SAAE4B,EAAqBF,EAAAG,GAAjBC,OAAY,IAAAF,EAAA,MAAKA,EAAEvB,EAASqB,EAAArB,UAAK0B,GAAIC,EAAAA,EAAAA,IAAAN,EAArD,+BACD,OACEO,EAAAA,cAACH,GAASI,EAAAA,EAAAA,IAAA,CAAC7B,WAAW8B,EAAAA,EAAAA,GAAW,cAAe9B,IAAgB0B,EAAI,CAAEJ,IAAKA,IACxE3B,EAGP,IAEAM,EAAY8B,UAAY,CACtBP,GAAIQ,IAAAA,YACJrC,SAAUqC,IAAAA,KACVhC,UAAWgC,IAAAA,QAGb/B,EAAYgC,YAAc,a,uGCYbjB,GAAcI,EAAAA,EAAAA,aACzB,SACEC,EAmBAC,G,MAlBE3B,EAAQ0B,EAAA1B,SACRK,EAASqB,EAAArB,UACTkC,EAAQb,EAAAa,SACRC,EAAed,EAAAc,gBACfC,EAAaf,EAAAe,cACbC,EAAiBhB,EAAAgB,kBACjBC,EAAajB,EAAAiB,cACbC,EAAQlB,EAAAkB,SACR/B,EAAEa,EAAAb,GACFgC,EAAOnB,EAAAmB,QACPC,EAAKpB,EAAAoB,MACLC,EAAOrB,EAAAqB,QACPC,EAAItB,EAAAsB,KACJC,EAAIvB,EAAAuB,KACJC,EAAexB,EAAAwB,gBACfC,EAAKzB,EAAAyB,MACFpB,GAjBLC,EAAAA,EAAAA,IAAAN,EAAA,+LAqBA,OACEO,EAAAA,cAACmB,EAAAA,EACC,CAAAC,YAAatB,EAAK,oBAClBQ,SAAUA,EACVC,gBAAiBA,EACjBC,cAAeA,EACfC,kBAAmBA,EACnBC,cAAeA,EACf9B,GAAIA,EACJgC,QAASA,EACTC,MAAOA,EACPG,KAAMA,EACNC,gBAAiBA,EACjBC,MAAOA,GAEPlB,EAAAA,cACE,UAAAC,EAAAA,EAAAA,IAAA,CAAArB,GAAIA,EACJR,WAAW8B,EAAAA,EAAAA,GACT,eAAaP,EAAA,GAEXA,EAAC,eAAe0B,OAAAN,IAASA,EACzBpB,EAAA,cAAciB,EACdjB,EAAA,YAAYuB,EAEdvB,GAAAvB,GAEF2C,KAAMJ,GACFb,EAAI,CACRJ,IAAKA,IAEJoB,EACGA,EAAQQ,KAAI,SAACC,EAAQC,GACnB,OACExB,EAAAA,cACO,UAADC,EAAAA,EAAAA,IAAC,CAAD,EAAmB,kBAAXsB,GACVA,EAAOE,UAAY,CAAEA,SAAUF,EAAOE,UACjB,kBAAXF,QACOG,IAAjBH,EAAOlC,OAAuB,CAAEA,MAAOkC,EAAOlC,OAAQ,CACxDsC,IAAKH,IAEc,kBAAXD,EAAsBA,EAASA,EAAOV,MAGpD,IACA9C,GAIZ,IAGFqB,EAAYe,WAASF,EAAAA,EAAAA,IAAA,CACnB7B,UAAWgC,IAAAA,OACXO,SAAUP,IAAAA,OACVU,QAASV,IAAAA,OACNe,EAAAA,EAAoBhB,WAGzBf,EAAYiB,YAAc,a,uGC1FbpB,GAAgBO,EAAAA,EAAAA,aAC3B,SACEC,EAiBAC,GAhBE,IAAA3B,EAAQ0B,EAAA1B,SACRK,EAASqB,EAAArB,UACTkC,EAAQb,EAAAa,SACRC,EAAed,EAAAc,gBACfC,EAAaf,EAAAe,cACbC,EAAiBhB,EAAAgB,kBACjBC,EAAajB,EAAAiB,cACb9B,EAAEa,EAAAb,GACFgC,EAAOnB,EAAAmB,QACPC,EAAKpB,EAAAoB,MACLe,EAASnC,EAAAmC,UACTZ,EAAIvB,EAAAuB,KACJC,EAAexB,EAAAwB,gBACfC,EAAKzB,EAAAyB,MACFpB,GAfLC,EAAAA,EAAAA,IAAAN,EAAA,+KAmBA,OACEO,EAAAA,cAACmB,EAAAA,EACC,CAAAC,YAAatB,EAAK,oBAClBQ,SAAUA,EACVC,gBAAiBA,EACjBC,cAAeA,EACfC,kBAAmBA,EACnBC,cAAeA,EACf9B,GAAIA,EACJgC,QAASA,EACTC,MAAOA,EACPG,KAAMA,EACNC,gBAAiBA,EACjBC,MAAOA,GAEPlB,EAAAA,cAAA,YAAAC,EAAAA,EAAAA,IAAA,CACE7B,WAAW8B,EAAAA,EAAAA,GACT0B,EAAY,yBAA2B,eACvC,CACE,aAAchB,EACd,WAAYM,GAEd9C,GAEFQ,GAAIA,GACAkB,EACJ,CAAAJ,IAAKA,IAEJ3B,GAIT,IAGFkB,EAAckB,WAASF,EAAAA,EAAAA,IAAA,CACrB7B,UAAWgC,IAAAA,OACXxB,GAAIwB,IAAAA,OACJwB,UAAWxB,IAAAA,MACRe,EAAAA,EAAoBhB,WAGzBlB,EAAcoB,YAAc,e","sources":["views/forms/floating-labels/FloatingLabels.js","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/form/CFormTextarea.tsx"],"sourcesContent":["import React from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormFloating,\r\n  CFormSelect,\r\n  CFormTextarea,\r\n  CRow,\r\n} from '@coreui/react'\r\nimport { DocsExample } from '../../../components'\r\n\r\nconst FloatingLabels = () => {\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Floating labels</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Wrap a pair of <code>&lt;CFormInput&gt;</code> and <code>&lt;CFormLabel&gt;</code>{' '}\r\n              elements in <code>CFormFloating</code> to enable floating labels with textual form\r\n              fields. A <code>placeholder</code> is required on each <code>&lt;CFormInput&gt;</code>{' '}\r\n              as our method of CSS-only floating labels uses the <code>:placeholder-shown</code>{' '}\r\n              pseudo-element. Also note that the <code>&lt;CFormInput&gt;</code> must come first so\r\n              we can utilize a sibling selector (e.g., <code>~</code>).\r\n            </p>\r\n            <DocsExample href=\"forms/floating-labels\">\r\n              <CFormFloating className=\"mb-3\">\r\n                <CFormInput type=\"email\" id=\"floatingInput\" placeholder=\"name@example.com\" />\r\n                <CFormLabel htmlFor=\"floatingInput\">Email address</CFormLabel>\r\n              </CFormFloating>\r\n              <CFormFloating>\r\n                <CFormInput type=\"password\" id=\"floatingPassword\" placeholder=\"Password\" />\r\n                <CFormLabel htmlFor=\"floatingPassword\">Password</CFormLabel>\r\n              </CFormFloating>\r\n            </DocsExample>\r\n            <p className=\"text-body-secondary small\">\r\n              When there&#39;s a <code>value</code> already defined, <code>&lt;CFormLabel&gt;</code>\r\n              s will automatically adjust to their floated position.\r\n            </p>\r\n            <DocsExample href=\"forms/floating-labels\">\r\n              <CFormFloating>\r\n                <CFormInput\r\n                  type=\"email\"\r\n                  id=\"floatingInputValue\"\r\n                  placeholder=\"name@example.com\"\r\n                  defaultValue=\"test@example.com\"\r\n                />\r\n                <CFormLabel htmlFor=\"floatingInputValue\">Input with value</CFormLabel>\r\n              </CFormFloating>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Floating labels</strong> <small>Textareas</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              By default, <code>&lt;CFormTextarea&gt;</code>s will be the same height as{' '}\r\n              <code>&lt;CFormInput&gt;</code>s.\r\n            </p>\r\n            <DocsExample href=\"forms/floating-labels#textareas\">\r\n              <CFormFloating>\r\n                <CFormTextarea\r\n                  id=\"floatingTextarea\"\r\n                  placeholder=\"Leave a comment here\"\r\n                ></CFormTextarea>\r\n                <CFormLabel htmlFor=\"floatingTextarea\">Comments</CFormLabel>\r\n              </CFormFloating>\r\n            </DocsExample>\r\n            <p className=\"text-body-secondary small\">\r\n              To set a custom height on your <code>&lt;CFormTextarea;&gt;</code>, do not use the{' '}\r\n              <code>rows</code> attribute. Instead, set an explicit <code>height</code> (either\r\n              inline or via custom CSS).\r\n            </p>\r\n            <DocsExample href=\"forms/floating-labels#textareas\">\r\n              <CFormFloating>\r\n                <CFormTextarea\r\n                  placeholder=\"Leave a comment here\"\r\n                  id=\"floatingTextarea2\"\r\n                  style={{ height: '100px' }}\r\n                ></CFormTextarea>\r\n                <CFormLabel htmlFor=\"floatingTextarea2\">Comments</CFormLabel>\r\n              </CFormFloating>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Floating labels</strong> <small>Selects</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Other than <code>&lt;CFormInput&gt;</code>, floating labels are only available on{' '}\r\n              <code>&lt;CFormSelect&gt;</code>s. They work in the same way, but unlike{' '}\r\n              <code>&lt;CFormInput&gt;</code>s, they&#39;ll always show the{' '}\r\n              <code>&lt;CFormLabel&gt;</code> in its floated state.{' '}\r\n              <strong>\r\n                Selects with <code>size</code> and <code>multiple</code> are not supported.\r\n              </strong>\r\n            </p>\r\n            <DocsExample href=\"forms/floating-labels#selects\">\r\n              <CFormFloating>\r\n                <CFormSelect id=\"floatingSelect\" aria-label=\"Floating label select example\">\r\n                  <option>Open this select menu</option>\r\n                  <option value=\"1\">One</option>\r\n                  <option value=\"2\">Two</option>\r\n                  <option value=\"3\">Three</option>\r\n                </CFormSelect>\r\n                <CFormLabel htmlFor=\"floatingSelect\">Works with selects</CFormLabel>\r\n              </CFormFloating>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Floating labels</strong> <small>Layout</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              When working with the CoreUI for Bootstrap grid system, be sure to place form elements\r\n              within column classes.\r\n            </p>\r\n            <DocsExample href=\"forms/floating-labels#layout\">\r\n              <CRow xs={{ gutter: 2 }}>\r\n                <CCol md>\r\n                  <CFormFloating>\r\n                    <CFormInput\r\n                      type=\"email\"\r\n                      id=\"floatingInputGrid\"\r\n                      placeholder=\"name@example.com\"\r\n                      defaultValue=\"email@example.com\"\r\n                    />\r\n                    <CFormLabel htmlFor=\"floatingInputGrid\">Email address</CFormLabel>\r\n                  </CFormFloating>\r\n                </CCol>\r\n                <CCol md>\r\n                  <CFormFloating>\r\n                    <CFormSelect id=\"floatingSelectGrid\" aria-label=\"Floating label select example\">\r\n                      <option>Open this select menu</option>\r\n                      <option value=\"1\">One</option>\r\n                      <option value=\"2\">Two</option>\r\n                      <option value=\"3\">Three</option>\r\n                    </CFormSelect>\r\n                    <CFormLabel htmlFor=\"floatingSelectGrid\">Works with selects</CFormLabel>\r\n                  </CFormFloating>\r\n                </CCol>\r\n              </CRow>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default FloatingLabels\r\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n"],"names":["FloatingLabels","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","DocsExample","href","CFormFloating","CFormInput","type","id","placeholder","CFormLabel","htmlFor","defaultValue","CFormTextarea","style","height","CFormSelect","value","gutter","md","forwardRef","_a","ref","_b","as","Component","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","htmlSize","invalid","label","options","size","text","tooltipFeedback","valid","CFormControlWrapper","describedby","concat","map","option","index","disabled","undefined","key","plainText"],"sourceRoot":""}