{"version":3,"file":"static/js/243.d49c14cc.chunk.js","mappings":"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","sources":["views/forms/form-control/FormControl.js","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CFormTextarea.tsx"],"sourcesContent":["import React from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CForm,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormTextarea,\r\n  CRow,\r\n} from '@coreui/react'\r\nimport { DocsExample } from '../../../components'\r\n\r\nconst FormControl = () => {\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Form Control</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <DocsExample href=\"forms/form-control\">\r\n              <CForm>\r\n                <div className=\"mb-3\">\r\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Email address</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"email\"\r\n                    id=\"exampleFormControlInput1\"\r\n                    placeholder=\"name@example.com\"\r\n                  />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <CFormLabel htmlFor=\"exampleFormControlTextarea1\">Example textarea</CFormLabel>\r\n                  <CFormTextarea id=\"exampleFormControlTextarea1\" rows={3}></CFormTextarea>\r\n                </div>\r\n              </CForm>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Form Control</strong> <small>Sizing</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Set heights using <code>size</code> property like <code>size=&#34;lg&#34;</code> and{' '}\r\n              <code>size=&#34;sm&#34;</code>.\r\n            </p>\r\n            <DocsExample href=\"forms/form-control#sizing\">\r\n              <CFormInput\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                placeholder=\"Large input\"\r\n                aria-label=\"lg input example\"\r\n              />\r\n              <br />\r\n              <CFormInput\r\n                type=\"text\"\r\n                placeholder=\"Default input\"\r\n                aria-label=\"default input example\"\r\n              />\r\n              <br />\r\n              <CFormInput\r\n                type=\"text\"\r\n                size=\"sm\"\r\n                placeholder=\"Small input\"\r\n                aria-label=\"sm input example\"\r\n              />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Form Control</strong> <small>Disabled</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Add the <code>disabled</code> boolean attribute on an input to give it a grayed out\r\n              appearance and remove pointer events.\r\n            </p>\r\n            <DocsExample href=\"forms/form-control#disabled\">\r\n              <CFormInput\r\n                type=\"text\"\r\n                placeholder=\"Disabled input\"\r\n                aria-label=\"Disabled input example\"\r\n                disabled\r\n              />\r\n              <br />\r\n              <CFormInput\r\n                type=\"text\"\r\n                placeholder=\"Disabled readonly input\"\r\n                aria-label=\"Disabled input example\"\r\n                disabled\r\n                readOnly\r\n              />\r\n              <br />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Form Control</strong> <small>Readonly</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Add the <code>readOnly</code> boolean attribute on an input to prevent modification of\r\n              the input&#39;s value. Read-only inputs appear lighter (just like disabled inputs),\r\n              but retain the standard cursor.\r\n            </p>\r\n            <DocsExample href=\"forms/form-control#readonly\">\r\n              <CFormInput\r\n                type=\"text\"\r\n                placeholder=\"Readonly input here...\"\r\n                aria-label=\"readonly input example\"\r\n                readOnly\r\n              />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Form Control</strong> <small>Readonly plain text</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              If you want to have <code>&lt;input readonly&gt;</code> elements in your form styled\r\n              as plain text, use the <code>plainText</code> boolean property to remove the default\r\n              form field styling and preserve the correct margin and padding.\r\n            </p>\r\n            <DocsExample href=\"components/accordion\">\r\n              <CRow className=\"mb-3\">\r\n                <CFormLabel htmlFor=\"staticEmail\" className=\"col-sm-2 col-form-label\">\r\n                  Email\r\n                </CFormLabel>\r\n                <div className=\"col-sm-10\">\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"staticEmail\"\r\n                    defaultValue=\"email@example.com\"\r\n                    readOnly\r\n                    plainText\r\n                  />\r\n                </div>\r\n              </CRow>\r\n              <CRow className=\"mb-3\">\r\n                <CFormLabel htmlFor=\"inputPassword\" className=\"col-sm-2 col-form-label\">\r\n                  Password\r\n                </CFormLabel>\r\n                <div className=\"col-sm-10\">\r\n                  <CFormInput type=\"password\" id=\"inputPassword\" />\r\n                </div>\r\n              </CRow>\r\n            </DocsExample>\r\n            <DocsExample href=\"components/accordion\">\r\n              <CForm className=\"row g-3\">\r\n                <div className=\"col-auto\">\r\n                  <CFormLabel htmlFor=\"staticEmail2\" className=\"visually-hidden\">\r\n                    Email\r\n                  </CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"staticEmail2\"\r\n                    defaultValue=\"email@example.com\"\r\n                    readOnly\r\n                    plainText\r\n                  />\r\n                </div>\r\n                <div className=\"col-auto\">\r\n                  <CFormLabel htmlFor=\"inputPassword2\" className=\"visually-hidden\">\r\n                    Password\r\n                  </CFormLabel>\r\n                  <CFormInput type=\"password\" id=\"inputPassword2\" placeholder=\"Password\" />\r\n                </div>\r\n                <div className=\"col-auto\">\r\n                  <CButton color=\"primary\" type=\"submit\" className=\"mb-3\">\r\n                    Confirm identity\r\n                  </CButton>\r\n                </div>\r\n              </CForm>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Form Control</strong> <small>File input</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <DocsExample href=\"forms/form-control#file-input\">\r\n              <div className=\"mb-3\">\r\n                <CFormLabel htmlFor=\"formFile\">Default file input example</CFormLabel>\r\n                <CFormInput type=\"file\" id=\"formFile\" />\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <CFormLabel htmlFor=\"formFileMultiple\">Multiple files input example</CFormLabel>\r\n                <CFormInput type=\"file\" id=\"formFileMultiple\" multiple />\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <CFormLabel htmlFor=\"formFileDisabled\">Disabled file input example</CFormLabel>\r\n                <CFormInput type=\"file\" id=\"formFileDisabled\" disabled />\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <CFormLabel htmlFor=\"formFileSm\">Small file input example</CFormLabel>\r\n                <CFormInput type=\"file\" size=\"sm\" id=\"formFileSm\" />\r\n              </div>\r\n              <div>\r\n                <CFormLabel htmlFor=\"formFileLg\">Large file input example</CFormLabel>\r\n                <CFormInput type=\"file\" size=\"lg\" id=\"formFileLg\" />\r\n              </div>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Form Control</strong> <small>Color</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <DocsExample href=\"forms/form-control#color\">\r\n              <CFormLabel htmlFor=\"exampleColorInput\">Color picker</CFormLabel>\r\n              <CFormInput\r\n                type=\"color\"\r\n                id=\"exampleColorInput\"\r\n                defaultValue=\"#563d7c\"\r\n                title=\"Choose your color\"\r\n              />\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default FormControl\r\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n"],"names":["FormControl","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","DocsExample","href","CForm","CFormLabel","htmlFor","CFormInput","type","id","placeholder","CFormTextarea","rows","size","disabled","readOnly","defaultValue","plainText","CButton","color","multiple","title","forwardRef","_a","ref","_b","as","Component","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","invalid","label","text","tooltipFeedback","valid","CFormControlWrapper","describedby"],"sourceRoot":""}