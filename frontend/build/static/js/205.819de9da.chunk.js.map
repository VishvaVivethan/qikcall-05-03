{"version":3,"file":"static/js/205.819de9da.chunk.js","mappings":"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","sources":["views/dashboard/Dashboard.js","views/widgets/WidgetsBrand.js","views/widgets/WidgetsDropdown.js","../node_modules/@coreui/react/src/components/card/CCardFooter.tsx","../node_modules/@coreui/react/src/components/widgets/CWidgetStatsA.tsx","../node_modules/@coreui/utils/src/getStyle.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport {\r\n  CAvatar,\r\n  CButton,\r\n  CButtonGroup,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CProgress,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react';\r\nimport CIcon from '@coreui/icons-react';\r\nimport {\r\n  cibCcAmex,\r\n  cibCcApplePay,\r\n  cibCcMastercard,\r\n  cibCcPaypal,\r\n  cibCcStripe,\r\n  cibCcVisa,\r\n  cibGoogle,\r\n  cibFacebook,\r\n  cibLinkedin,\r\n  cifBr,\r\n  cifEs,\r\n  cifFr,\r\n  cifIn,\r\n  cifPl,\r\n  cifUs,\r\n  cibTwitter,\r\n  cilCloudDownload,\r\n  cilPeople,\r\n  cilUser,\r\n  cilUserFemale,\r\n} from '@coreui/icons';\r\n\r\nimport avatar1 from '../../adminassets/images/avatars/1.jpg';\r\nimport avatar2 from '../../adminassets/images/avatars/2.jpg';\r\nimport avatar3 from '../../adminassets/images/avatars/3.jpg';\r\nimport avatar4 from '../../adminassets/images/avatars/4.jpg';\r\nimport avatar5 from '../../adminassets/images/avatars/5.jpg';\r\nimport avatar6 from '../../adminassets/images/avatars/6.jpg';\r\n\r\nimport WidgetsBrand from '../widgets/WidgetsBrand';\r\nimport WidgetsDropdown from '../widgets/WidgetsDropdown';\r\nimport MainChart from './MainChart';\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport Cookies from 'js-cookie';\r\nimport { Grid, Table, TableHead, TableRow, TableCell, TableBody, Paper } from '@mui/material';\r\n\r\nconst Dashboard = () => {\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const token = Cookies.get('token');\r\n    \r\n    if (!token) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const decodedToken = jwtDecode(token);\r\n      const currentTime = Date.now() / 1000;\r\n\r\n      // If token is expired, remove the token and navigate to homepage\r\n      if (decodedToken.exp < currentTime) {\r\n        Cookies.remove('token');\r\n        navigate('/');\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Invalid token:\", error);\r\n      Cookies.remove('token');\r\n      navigate('/');\r\n    }\r\n  }, [navigate]);\r\n\r\n  const[todayuser,setTodayuser]=useState('')\r\n  const[todayadvertise,setTodayAdvertise]=useState('')\r\n\r\n  useEffect(()=>{\r\n    const registerToday =()=>{\r\n      try{\r\n        const requestOptions = {\r\n          method: \"GET\",\r\n          redirect: \"follow\"\r\n        };\r\n        \r\n        fetch(\"/api/todayregisteruser\", requestOptions)\r\n        .then(async (response) => {\r\n          if (response.status === 200 || response.status === 400) {\r\n            return { status_code: response.status, data: await response.json() };\r\n          } else {\r\n            return { status_code: response.status, data: { msg: 'Unexpected Error' } };\r\n          }\r\n      })\r\n      .then((result) => {\r\n        setTodayuser(result.data.data);\r\n        console.log(result.data.data,\"registerToday\");\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n      }catch(error){\r\n        console.log(\"error\", error)\r\n      }\r\n    }\r\n    const registerTodayAdvertise =()=>{\r\n      try{\r\n        const requestOptions = {\r\n          method: \"GET\",\r\n          redirect: \"follow\"\r\n        };\r\n        \r\n        fetch(\"/api/todayregisteradvertise\", requestOptions)\r\n        .then(async (response) => {\r\n          if (response.status === 200 || response.status === 400) {\r\n            return { status_code: response.status, data: await response.json() };\r\n          } else {\r\n            return { status_code: response.status, data: { msg: 'Unexpected Error' } };\r\n          }\r\n      })\r\n      .then((result) => {\r\n        setTodayAdvertise(result.data.data);\r\n        console.log(result.data.data,\"registerToday\");\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n      }catch(error){\r\n        console.log(\"error\", error)\r\n      }\r\n    }\r\n    registerToday()\r\n    registerTodayAdvertise()\r\n  },[])\r\n\r\n  // Rest of your Dashboard component code remains the same...\r\n  return (\r\n    <>\r\n      <WidgetsDropdown className=\"mb-4\" />\r\n      <CCard className=\"mb-4\">\r\n        <CCardBody>\r\n          <CRow>\r\n            <CCol sm={5}>\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n                 Registered Users\r\n              </h4>\r\n              <div className=\"small text-body-secondary\">Today</div>\r\n            </CCol>\r\n            <CCol sm={7} className=\"d-none d-md-block\">\r\n              {/* <CButton color=\"primary\" className=\"float-end\">\r\n                <CIcon icon={cilCloudDownload} />\r\n              </CButton>\r\n              <CButtonGroup className=\"float-end me-3\">\r\n                {['Day', 'Month', 'Year'].map((value) => (\r\n                  <CButton\r\n                    color=\"outline-secondary\"\r\n                    key={value}\r\n                    className=\"mx-0\"\r\n                    active={value === 'Month'}\r\n                  >\r\n                    {value}\r\n                  </CButton>\r\n                ))}\r\n              </CButtonGroup> */}\r\n            </CCol>\r\n          </CRow>\r\n          <Grid mt={2} >\r\n  <Table>\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Name</TableCell>\r\n        <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Email</TableCell>\r\n        <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Phone</TableCell>\r\n        <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Registration Date</TableCell>\r\n      </TableRow>\r\n    </TableHead>\r\n    <TableBody>\r\n      {todayuser.length > 0 ? (\r\n        todayuser.map(user => (\r\n          <TableRow key={user._id} hover>\r\n            <TableCell>{user.username}</TableCell>\r\n            <TableCell>{user.email}</TableCell>\r\n            <TableCell>{user.phonenumber}</TableCell>\r\n            <TableCell>{new Date(user.createdAt).toLocaleString()}</TableCell>\r\n          </TableRow>\r\n        ))\r\n      ) : (\r\n        <TableRow>\r\n          <TableCell colSpan={4} style={{ textAlign: 'center', color: '#888' }}>No users registered today</TableCell>\r\n        </TableRow>\r\n      )}\r\n    </TableBody>\r\n  </Table>\r\n</Grid>\r\n        </CCardBody>\r\n        <CCardFooter>\r\n          <CRow className=\"text-center\">\r\n            {/* Render progress bars */}\r\n          </CRow>\r\n        </CCardFooter>\r\n      </CCard>\r\n\r\n      <WidgetsBrand className=\"mb-4\" withCharts />\r\n      <CRow>\r\n        <CCol xs>\r\n          <CCard className=\"mb-4\">\r\n            <CCardHeader></CCardHeader>\r\n            <CCardBody>\r\n            <Grid mt={2} >\r\n  <Table>\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Name</TableCell>\r\n        <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Email</TableCell>\r\n        <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Phone</TableCell>\r\n        <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Registration Date</TableCell>\r\n      </TableRow>\r\n    </TableHead>\r\n    <TableBody>\r\n      {todayadvertise.length > 0 ? (\r\n        todayadvertise.map(user => (\r\n          <TableRow key={user._id} hover>\r\n            <TableCell>{user.username}</TableCell>\r\n            <TableCell>{user.email}</TableCell>\r\n            <TableCell>{user.phonenumber}</TableCell>\r\n            <TableCell>{new Date(user.createdAt).toLocaleString()}</TableCell>\r\n          </TableRow>\r\n        ))\r\n      ) : (\r\n        <TableRow>\r\n          <TableCell colSpan={4} style={{ textAlign: 'center', color: '#888' }}>No Advertise Registered Today</TableCell>\r\n        </TableRow>\r\n      )}\r\n    </TableBody>\r\n  </Table>\r\n</Grid>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle,\r\n  CWidgetStatsA,\r\n} from '@coreui/react'\r\nimport { getStyle } from '@coreui/utils'\r\nimport { CChartBar, CChartLine } from '@coreui/react-chartjs'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cilArrowBottom, cilArrowTop, cilOptions } from '@coreui/icons'\r\n\r\nconst WidgetsDropdown = (props) => {\r\n  const widgetChartRef1 = useRef(null)\r\n  const widgetChartRef2 = useRef(null)\r\n\r\n  useEffect(() => {\r\n    document.documentElement.addEventListener('ColorSchemeChange', () => {\r\n      if (widgetChartRef1.current) {\r\n        setTimeout(() => {\r\n          widgetChartRef1.current.data.datasets[0].pointBackgroundColor = getStyle('--cui-primary')\r\n          widgetChartRef1.current.update()\r\n        })\r\n      }\r\n\r\n      if (widgetChartRef2.current) {\r\n        setTimeout(() => {\r\n          widgetChartRef2.current.data.datasets[0].pointBackgroundColor = getStyle('--cui-info')\r\n          widgetChartRef2.current.update()\r\n        })\r\n      }\r\n    })\r\n  }, [widgetChartRef1, widgetChartRef2])\r\n\r\nconst[advertisecount,setAdvertisecount]=useState('')\r\n\r\nconst[offercount,setOffercount]=useState('')\r\nconst[salescount,setSalescount]=useState('')\r\n\r\nuseEffect(() => {\r\n  AdvertiseCount();\r\n  OfferCount();\r\n  SalesCount()\r\n}, []);\r\n\r\n  const AdvertiseCount =()=>{\r\n   try{\r\n    const requestOptions = {\r\n      method: \"GET\",\r\n      redirect: \"follow\"\r\n    };\r\n    \r\n    fetch(\"/api/advertisecount\", requestOptions)\r\n    .then(async (response) => {\r\n      if (response.status === 200 || response.status === 400) {\r\n        return { status_code: response.status, data: await response.json() };\r\n      } else {\r\n        return { status_code: response.status, data: { msg: 'Unexpected Error' } };\r\n      }\r\n  })\r\n  .then((result) => {\r\n    setAdvertisecount(result.data.data);\r\n    console.log(result.data.data,\"advertisecount\");\r\n  })\r\n  .catch((error) => console.log(\"error\", error));\r\n   }catch(error){\r\n    console.log(\"error\", error)\r\n   }\r\n  }\r\n\r\n  const OfferCount =()=>{\r\n    try{\r\n     const requestOptions = {\r\n       method: \"GET\",\r\n       redirect: \"follow\"\r\n     };\r\n     \r\n     fetch(\"/api/offercount\", requestOptions)\r\n     .then(async (response) => {\r\n       if (response.status === 200 || response.status === 400) {\r\n         return { status_code: response.status, data: await response.json() };\r\n       } else {\r\n         return { status_code: response.status, data: { msg: 'Unexpected Error' } };\r\n       }\r\n   })\r\n   .then((result) => {\r\n    setOffercount(result.data.data);\r\n     console.log(result.data.data,\"advertisecount\");\r\n   })\r\n   .catch((error) => console.log(\"error\", error));\r\n    }catch(error){\r\n     console.log(\"error\", error)\r\n    }\r\n   }\r\n\r\n  const  SalesCount =()=>{\r\n    try{\r\n      const requestOptions = {\r\n        method: \"GET\",\r\n        redirect: \"follow\"\r\n      };\r\n      \r\n      fetch(\"/api/salescount\", requestOptions)\r\n      .then(async (response) => {\r\n        if (response.status === 200 || response.status === 400) {\r\n          return { status_code: response.status, data: await response.json() };\r\n        } else {\r\n          return { status_code: response.status, data: { msg: 'Unexpected Error' } };\r\n        }\r\n    })\r\n    .then((result) => {\r\n      setSalescount(result.data.data);\r\n      console.log(result.data.data,\"salescount\");\r\n    })\r\n    .catch((error) => console.log(\"error\", error));\r\n   }catch(error){\r\n    console.log(\"error\", error)\r\n   }\r\n  }\r\n\r\n  return (\r\n    <CRow className={props.className} xs={{ gutter: 4 }}>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsA\r\n          color=\"primary\"\r\n          value={\r\n            <>\r\n            \r\n              {advertisecount}{' '}\r\n              {/* <span className=\"fs-6 fw-normal\">\r\n                (-12.4% <CIcon icon={cilArrowBottom} />)\r\n              </span> */}\r\n            </>\r\n          }\r\n          title=\"Advertisements\"\r\n          // action={\r\n          //   <CDropdown alignment=\"end\">\r\n          //     <CDropdownToggle color=\"transparent\" caret={false} className=\"text-white p-0\">\r\n          //       <CIcon icon={cilOptions} />\r\n          //     </CDropdownToggle>\r\n          //     <CDropdownMenu>\r\n          //       <CDropdownItem>Action</CDropdownItem>\r\n          //       <CDropdownItem>Another action</CDropdownItem>\r\n          //       <CDropdownItem>Something else here...</CDropdownItem>\r\n          //       <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n          //     </CDropdownMenu>\r\n          //   </CDropdown>\r\n          // }\r\n          chart={\r\n            <CChartLine\r\n              ref={widgetChartRef1}\r\n              className=\"mt-3 mx-3\"\r\n              style={{ height: '70px' }}\r\n              data={{\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'transparent',\r\n                    borderColor: 'rgba(255,255,255,.55)',\r\n                    pointBackgroundColor: getStyle('--cui-primary'),\r\n                    data: [65, 59, 84, 84, 51, 55, 40],\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                plugins: {\r\n                  legend: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  x: {\r\n                    border: {\r\n                      display: false,\r\n                    },\r\n                    grid: {\r\n                      display: false,\r\n                      drawBorder: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  y: {\r\n                    min: 30,\r\n                    max: 89,\r\n                    display: false,\r\n                    grid: {\r\n                      display: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    borderWidth: 1,\r\n                    tension: 0.4,\r\n                  },\r\n                  point: {\r\n                    radius: 4,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 4,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      </CCol>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsA\r\n          color=\"warning\"\r\n          value={\r\n            <>\r\n              {offercount}{' '}\r\n              {/* <span className=\"fs-6 fw-normal\">\r\n                (-23.6% <CIcon icon={cilArrowBottom} />)\r\n              </span> */}\r\n            </>\r\n          }\r\n          title=\"Services\"\r\n          // action={\r\n          //   <CDropdown alignment=\"end\">\r\n          //     <CDropdownToggle color=\"transparent\" caret={false} className=\"text-white p-0\">\r\n          //       <CIcon icon={cilOptions} />\r\n          //     </CDropdownToggle>\r\n          //     <CDropdownMenu>\r\n          //       <CDropdownItem>Action</CDropdownItem>\r\n          //       <CDropdownItem>Another action</CDropdownItem>\r\n          //       <CDropdownItem>Something else here...</CDropdownItem>\r\n          //       <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n          //     </CDropdownMenu>\r\n          //   </CDropdown>\r\n          // }\r\n          chart={\r\n            <CChartBar\r\n              className=\"mt-3 mx-3\"\r\n              style={{ height: '70px' }}\r\n              data={{\r\n                labels: [\r\n                  'January',\r\n                  'February',\r\n                  'March',\r\n                  'April',\r\n                  'May',\r\n                  'June',\r\n                  'July',\r\n                  'August',\r\n                  'September',\r\n                  'October',\r\n                  'November',\r\n                  'December',\r\n                  'January',\r\n                  'February',\r\n                  'March',\r\n                  'April',\r\n                ],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(255,255,255,.2)',\r\n                    borderColor: 'rgba(255,255,255,.55)',\r\n                    data: [78, 81, 80, 45, 34, 12, 40, 85, 65, 23, 12, 98, 34, 84, 67, 82],\r\n                    barPercentage: 0.6,\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                maintainAspectRatio: false,\r\n                plugins: {\r\n                  legend: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                scales: {\r\n                  x: {\r\n                    grid: {\r\n                      display: false,\r\n                      drawTicks: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  y: {\r\n                    border: {\r\n                      display: false,\r\n                    },\r\n                    grid: {\r\n                      display: false,\r\n                      drawBorder: false,\r\n                      drawTicks: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      </CCol>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsA\r\n          color=\"warning\"\r\n          value={\r\n            <>\r\n              {salescount}{' '}\r\n              {/* <span className=\"fs-6 fw-normal\">\r\n                (84.7% <CIcon icon={cilArrowTop} />)\r\n              </span> */}\r\n            </>\r\n          }\r\n          title=\"Biz-Sales\"\r\n          // action={\r\n          //   <CDropdown alignment=\"end\">\r\n          //     <CDropdownToggle color=\"transparent\" caret={false} className=\"text-white p-0\">\r\n          //       <CIcon icon={cilOptions} />\r\n          //     </CDropdownToggle>\r\n          //     <CDropdownMenu>\r\n          //       <CDropdownItem>Action</CDropdownItem>\r\n          //       <CDropdownItem>Another action</CDropdownItem>\r\n          //       <CDropdownItem>Something else here...</CDropdownItem>\r\n          //       <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n          //     </CDropdownMenu>\r\n          //   </CDropdown>\r\n          // }\r\n          chart={\r\n            <CChartLine\r\n              className=\"mt-3\"\r\n              style={{ height: '70px' }}\r\n              data={{\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(255,255,255,.2)',\r\n                    borderColor: 'rgba(255,255,255,.55)',\r\n                    data: [78, 81, 80, 45, 34, 12, 40],\r\n                    fill: true,\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                plugins: {\r\n                  legend: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  x: {\r\n                    display: false,\r\n                  },\r\n                  y: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    borderWidth: 2,\r\n                    tension: 0.4,\r\n                  },\r\n                  point: {\r\n                    radius: 0,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 4,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nWidgetsDropdown.propTypes = {\r\n  className: PropTypes.string,\r\n  withCharts: PropTypes.bool,\r\n}\r\n\r\nexport default WidgetsDropdown\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle,\r\n  CWidgetStatsA,\r\n} from '@coreui/react'\r\nimport { getStyle } from '@coreui/utils'\r\nimport { CChartBar, CChartLine } from '@coreui/react-chartjs'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cilArrowBottom, cilArrowTop, cilOptions } from '@coreui/icons'\r\n\r\nconst WidgetsDropdown = (props) => {\r\n  const widgetChartRef1 = useRef(null)\r\n  const widgetChartRef2 = useRef(null)\r\n\r\n  useEffect(() => {\r\n    document.documentElement.addEventListener('ColorSchemeChange', () => {\r\n      if (widgetChartRef1.current) {\r\n        setTimeout(() => {\r\n          widgetChartRef1.current.data.datasets[0].pointBackgroundColor = getStyle('--cui-primary')\r\n          widgetChartRef1.current.update()\r\n        })\r\n      }\r\n\r\n      if (widgetChartRef2.current) {\r\n        setTimeout(() => {\r\n          widgetChartRef2.current.data.datasets[0].pointBackgroundColor = getStyle('--cui-info')\r\n          widgetChartRef2.current.update()\r\n        })\r\n      }\r\n    })\r\n  }, [widgetChartRef1, widgetChartRef2])\r\n\r\nconst[usercount,setUsercount]=useState('')\r\nconst[freelancercount,setFreelancercount]=useState('')\r\nconst[businesscount,setBusinesscount]=useState('')\r\nconst[servicecount,setServicecount]=useState('')\r\n\r\nuseEffect(() => {\r\n  UserCount();\r\n  ServiceCount();\r\n}, []);\r\n\r\n  const UserCount =()=>{\r\n   try{\r\n    const requestOptions = {\r\n      method: \"GET\",\r\n      redirect: \"follow\"\r\n    };\r\n    \r\n    fetch(\"/api/usercount\", requestOptions)\r\n      .then(async (response) => {\r\n        if (response.status === 200 || response.status === 400) {\r\n          return { status_code: response.status, data: await response.json() };\r\n        } else {\r\n          return { status_code: response.status, data: { msg: 'Unexpected Error' } };\r\n        }\r\n    })\r\n    .then((result) => {\r\n      setUsercount(result.data.data[0]);\r\n      setFreelancercount(result.data.data[1]);\r\n      setBusinesscount(result.data.data[1]);\r\n      console.log(result.data.data[0],\"usercount\");\r\n    })\r\n    .catch((error) => console.log(\"error\", error));\r\n   }catch(error){\r\n    console.log(\"error\", error)\r\n   }\r\n  }\r\n\r\n  const  ServiceCount =()=>{\r\n    try{\r\n      const requestOptions = {\r\n        method: \"GET\",\r\n        redirect: \"follow\"\r\n      };\r\n      \r\n      fetch(\"/api/servicecount\", requestOptions)\r\n      .then(async (response) => {\r\n        if (response.status === 200 || response.status === 400) {\r\n          return { status_code: response.status, data: await response.json() };\r\n        } else {\r\n          return { status_code: response.status, data: { msg: 'Unexpected Error' } };\r\n        }\r\n    })\r\n    .then((result) => {\r\n      setServicecount(result.data.data[0]);\r\n      console.log(result.data.data[0],\"servicecount\");\r\n    })\r\n    .catch((error) => console.log(\"error\", error));\r\n   }catch(error){\r\n    console.log(\"error\", error)\r\n   }\r\n  }\r\n\r\n  return (\r\n    <CRow className={props.className} xs={{ gutter: 4 }}>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsA\r\n          color=\"primary\"\r\n          value={\r\n            <>\r\n            \r\n              {usercount}{' '}\r\n              {/* <span className=\"fs-6 fw-normal\">\r\n                (-12.4% <CIcon icon={cilArrowBottom} />)\r\n              </span> */}\r\n            </>\r\n          }\r\n          title=\"Customers\"\r\n          // action={\r\n          //   <CDropdown alignment=\"end\">\r\n          //     <CDropdownToggle color=\"transparent\" caret={false} className=\"text-white p-0\">\r\n          //       <CIcon icon={cilOptions} />\r\n          //     </CDropdownToggle>\r\n          //     <CDropdownMenu>\r\n          //       <CDropdownItem>Action</CDropdownItem>\r\n          //       <CDropdownItem>Another action</CDropdownItem>\r\n          //       <CDropdownItem>Something else here...</CDropdownItem>\r\n          //       <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n          //     </CDropdownMenu>\r\n          //   </CDropdown>\r\n          // }\r\n          chart={\r\n            <CChartLine\r\n              ref={widgetChartRef1}\r\n              className=\"mt-3 mx-3\"\r\n              style={{ height: '70px' }}\r\n              data={{\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'transparent',\r\n                    borderColor: 'rgba(255,255,255,.55)',\r\n                    pointBackgroundColor: getStyle('--cui-primary'),\r\n                    data: [65, 59, 84, 84, 51, 55, 40],\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                plugins: {\r\n                  legend: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  x: {\r\n                    border: {\r\n                      display: false,\r\n                    },\r\n                    grid: {\r\n                      display: false,\r\n                      drawBorder: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  y: {\r\n                    min: 30,\r\n                    max: 89,\r\n                    display: false,\r\n                    grid: {\r\n                      display: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    borderWidth: 1,\r\n                    tension: 0.4,\r\n                  },\r\n                  point: {\r\n                    radius: 4,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 4,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      </CCol>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsA\r\n          color=\"info\"\r\n          value={\r\n            <>\r\n              {freelancercount}{' '}\r\n              {/* <span className=\"fs-6 fw-normal\">\r\n                (40.9% <CIcon icon={cilArrowTop} />)\r\n              </span> */}\r\n            </>\r\n          }\r\n          title=\"Freelancer\"\r\n          // action={\r\n          //   <CDropdown alignment=\"end\">\r\n          //     <CDropdownToggle color=\"transparent\" caret={false} className=\"text-white p-0\">\r\n          //       <CIcon icon={cilOptions} />\r\n          //     </CDropdownToggle>\r\n          //     <CDropdownMenu>\r\n          //       <CDropdownItem>Action</CDropdownItem>\r\n          //       <CDropdownItem>Another action</CDropdownItem>\r\n          //       <CDropdownItem>Something else here...</CDropdownItem>\r\n          //       <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n          //     </CDropdownMenu>\r\n          //   </CDropdown>\r\n          // }\r\n          chart={\r\n            <CChartLine\r\n              ref={widgetChartRef2}\r\n              className=\"mt-3 mx-3\"\r\n              style={{ height: '70px' }}\r\n              data={{\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'transparent',\r\n                    borderColor: 'rgba(255,255,255,.55)',\r\n                    pointBackgroundColor: getStyle('--cui-info'),\r\n                    data: [1, 18, 9, 17, 34, 22, 11],\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                plugins: {\r\n                  legend: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  x: {\r\n                    border: {\r\n                      display: false,\r\n                    },\r\n                    grid: {\r\n                      display: false,\r\n                      drawBorder: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  y: {\r\n                    min: -9,\r\n                    max: 39,\r\n                    display: false,\r\n                    grid: {\r\n                      display: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    borderWidth: 1,\r\n                  },\r\n                  point: {\r\n                    radius: 4,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 4,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      </CCol>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsA\r\n          color=\"warning\"\r\n          value={\r\n            <>\r\n              {businesscount}{' '}\r\n              {/* <span className=\"fs-6 fw-normal\">\r\n                (84.7% <CIcon icon={cilArrowTop} />)\r\n              </span> */}\r\n            </>\r\n          }\r\n          title=\"Businessman\"\r\n          // action={\r\n          //   <CDropdown alignment=\"end\">\r\n          //     <CDropdownToggle color=\"transparent\" caret={false} className=\"text-white p-0\">\r\n          //       <CIcon icon={cilOptions} />\r\n          //     </CDropdownToggle>\r\n          //     <CDropdownMenu>\r\n          //       <CDropdownItem>Action</CDropdownItem>\r\n          //       <CDropdownItem>Another action</CDropdownItem>\r\n          //       <CDropdownItem>Something else here...</CDropdownItem>\r\n          //       <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n          //     </CDropdownMenu>\r\n          //   </CDropdown>\r\n          // }\r\n          chart={\r\n            <CChartLine\r\n              className=\"mt-3\"\r\n              style={{ height: '70px' }}\r\n              data={{\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(255,255,255,.2)',\r\n                    borderColor: 'rgba(255,255,255,.55)',\r\n                    data: [78, 81, 80, 45, 34, 12, 40],\r\n                    fill: true,\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                plugins: {\r\n                  legend: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  x: {\r\n                    display: false,\r\n                  },\r\n                  y: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    borderWidth: 2,\r\n                    tension: 0.4,\r\n                  },\r\n                  point: {\r\n                    radius: 0,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 4,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      </CCol>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsA\r\n          color=\"danger\"\r\n          value={\r\n            <>\r\n              {servicecount}{' '}\r\n              {/* <span className=\"fs-6 fw-normal\">\r\n                (-23.6% <CIcon icon={cilArrowBottom} />)\r\n              </span> */}\r\n            </>\r\n          }\r\n          title=\"Services\"\r\n          // action={\r\n          //   <CDropdown alignment=\"end\">\r\n          //     <CDropdownToggle color=\"transparent\" caret={false} className=\"text-white p-0\">\r\n          //       <CIcon icon={cilOptions} />\r\n          //     </CDropdownToggle>\r\n          //     <CDropdownMenu>\r\n          //       <CDropdownItem>Action</CDropdownItem>\r\n          //       <CDropdownItem>Another action</CDropdownItem>\r\n          //       <CDropdownItem>Something else here...</CDropdownItem>\r\n          //       <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n          //     </CDropdownMenu>\r\n          //   </CDropdown>\r\n          // }\r\n          chart={\r\n            <CChartBar\r\n              className=\"mt-3 mx-3\"\r\n              style={{ height: '70px' }}\r\n              data={{\r\n                labels: [\r\n                  'January',\r\n                  'February',\r\n                  'March',\r\n                  'April',\r\n                  'May',\r\n                  'June',\r\n                  'July',\r\n                  'August',\r\n                  'September',\r\n                  'October',\r\n                  'November',\r\n                  'December',\r\n                  'January',\r\n                  'February',\r\n                  'March',\r\n                  'April',\r\n                ],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(255,255,255,.2)',\r\n                    borderColor: 'rgba(255,255,255,.55)',\r\n                    data: [78, 81, 80, 45, 34, 12, 40, 85, 65, 23, 12, 98, 34, 84, 67, 82],\r\n                    barPercentage: 0.6,\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                maintainAspectRatio: false,\r\n                plugins: {\r\n                  legend: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                scales: {\r\n                  x: {\r\n                    grid: {\r\n                      display: false,\r\n                      drawTicks: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  y: {\r\n                    border: {\r\n                      display: false,\r\n                    },\r\n                    grid: {\r\n                      display: false,\r\n                      drawBorder: false,\r\n                      drawTicks: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nWidgetsDropdown.propTypes = {\r\n  className: PropTypes.string,\r\n  withCharts: PropTypes.bool,\r\n}\r\n\r\nexport default WidgetsDropdown\r\n","import PropTypes from 'prop-types'\nimport React, { forwardRef, HTMLAttributes } from 'react'\nimport classNames from 'classnames'\n\nexport interface CCardFooterProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardFooter = forwardRef<HTMLDivElement, CCardFooterProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-footer', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardFooter.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardFooter.displayName = 'CCardFooter'\n","import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCard, CCardBody } from '../card'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CWidgetStatsAProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * Action node for your component.\n   */\n  action?: ReactNode\n  /**\n   * Chart node for your component.\n   */\n  chart?: string | ReactNode\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Title node for your component.\n   */\n  title?: string | ReactNode\n  /**\n   * Value node for your component.\n   */\n  value?: string | number | ReactNode\n}\n\nexport const CWidgetStatsA = forwardRef<HTMLDivElement, CWidgetStatsAProps>(\n  ({ action, chart, className, color, title, value, ...rest }, ref) => {\n    return (\n      <CCard\n        className={classNames({ [`bg-${color}`]: color, 'text-white': color }, className)}\n        {...rest}\n        ref={ref}\n      >\n        <CCardBody className=\"pb-0 d-flex justify-content-between align-items-start\">\n          <div>\n            {value && <div className=\"fs-4 fw-semibold\">{value}</div>}\n            {title && <div>{title}</div>}\n          </div>\n          {action}\n        </CCardBody>\n        {chart}\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsA.propTypes = {\n  action: PropTypes.node,\n  chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  color: colorPropType,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n}\n\nCWidgetStatsA.displayName = 'CWidgetStatsA'\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (__COREUI_VERSION__): getStyle.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst getStyle = (property: string, element?: Element) => {\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  if (typeof document === 'undefined') {\n    return\n  }\n\n  const _element = element ?? document.body\n\n  return window.getComputedStyle(_element, null).getPropertyValue(property).replace(/^\\s/, '')\n}\n\nexport default getStyle\n"],"names":["Dashboard","navigate","useNavigate","useEffect","token","Cookies","get","decodedToken","jwtDecode","currentTime","Date","now","exp","remove","error","console","todayuser","setTodayuser","useState","todayadvertise","setTodayAdvertise","registerToday","fetch","method","redirect","then","async","response","status","status_code","data","json","msg","result","log","catch","registerTodayAdvertise","_jsxs","_Fragment","children","_jsx","WidgetsDropdown","className","CCard","CCardBody","CRow","CCol","sm","id","Grid","mt","Table","TableHead","TableRow","TableCell","style","fontWeight","backgroundColor","TableBody","length","map","user","hover","username","email","phonenumber","createdAt","toLocaleString","_id","colSpan","textAlign","color","CCardFooter","WidgetsBrand","withCharts","xs","CCardHeader","props","widgetChartRef1","useRef","widgetChartRef2","document","documentElement","addEventListener","current","setTimeout","datasets","pointBackgroundColor","getStyle","update","advertisecount","setAdvertisecount","offercount","setOffercount","salescount","setSalescount","AdvertiseCount","OfferCount","SalesCount","gutter","xl","xxl","CWidgetStatsA","value","title","chart","CChartLine","ref","height","labels","label","borderColor","options","plugins","legend","display","maintainAspectRatio","scales","x","border","grid","drawBorder","ticks","y","min","max","elements","line","borderWidth","tension","point","radius","hitRadius","hoverRadius","CChartBar","barPercentage","drawTicks","fill","usercount","setUsercount","freelancercount","setFreelancercount","businesscount","setBusinesscount","servicecount","setServicecount","UserCount","ServiceCount","forwardRef","_a","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","action","_b","concat","colorPropType","property","element","window","_element","body","getComputedStyle","getPropertyValue","replace"],"sourceRoot":""}