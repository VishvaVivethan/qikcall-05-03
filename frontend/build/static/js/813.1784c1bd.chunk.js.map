{"version":3,"file":"static/js/813.1784c1bd.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/tabs/CTabs.tsx","../node_modules/@coreui/react/src/components/tabs/CTabList.tsx","../node_modules/@coreui/react/src/components/tabs/CTab.tsx","../node_modules/@coreui/react/src/components/tabs/CTabPanel.tsx","views/base/tabs/Tabs.js","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/utils/getTransitionDurationFromElement.ts"],"sourcesContent":["import React, { createContext, forwardRef, HTMLAttributes, useEffect, useId, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CTabsProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  /**\n   * The active item key.\n   */\n  activeItemKey: number | string\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The callback is fired when the active tab changes.\n   */\n  onChange?: (value: number | string) => void\n}\n\nexport interface TabsContextProps {\n  _activeItemKey?: number | string\n  setActiveItemKey: React.Dispatch<React.SetStateAction<number | string | undefined>>\n  id?: string\n}\n\nexport const TabsContext = createContext({} as TabsContextProps)\n\nexport const CTabs = forwardRef<HTMLDivElement, CTabsProps>(\n  ({ children, activeItemKey, className, onChange }, ref) => {\n    const id = useId()\n    const [_activeItemKey, setActiveItemKey] = useState(activeItemKey)\n\n    useEffect(() => {\n      _activeItemKey && onChange && onChange(_activeItemKey)\n    }, [_activeItemKey])\n\n    return (\n      <TabsContext.Provider value={{ _activeItemKey, setActiveItemKey, id }}>\n        <div className={classNames('tabs', className)} ref={ref}>\n          {children}\n        </div>\n      </TabsContext.Provider>\n    )\n  },\n)\n\nCTabs.propTypes = {\n  activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n}\n\nCTabs.displayName = 'CTabs'\n","import React, { forwardRef, HTMLAttributes, KeyboardEvent, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { useForkedRef } from '../../hooks'\nimport { getNextActiveElement } from '../../utils'\n\nexport interface CTabListProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Specify a layout type for component.\n   */\n  layout?: 'fill' | 'justified'\n  /**\n   * Set the nav variant to tabs or pills.\n   */\n  variant?: 'pills' | 'tabs' | 'underline' | 'underline-border'\n}\n\nexport const CTabList = forwardRef<HTMLDivElement, CTabListProps>(\n  ({ children, className, layout, variant, ...rest }, ref) => {\n    const tabListRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, tabListRef)\n\n    const handleKeydown = (event: KeyboardEvent<HTMLDivElement>) => {\n      if (\n        tabListRef.current !== null &&\n        (event.key === 'ArrowDown' ||\n          event.key === 'ArrowUp' ||\n          event.key === 'ArrowLeft' ||\n          event.key === 'ArrowRight' ||\n          event.key === 'Home' ||\n          event.key === 'End')\n      ) {\n        event.preventDefault()\n        const target = event.target as HTMLElement\n        // eslint-disable-next-line unicorn/prefer-spread\n        const items: HTMLElement[] = Array.from(\n          tabListRef.current.querySelectorAll('.nav-link:not(.disabled):not(:disabled)'),\n        )\n\n        let nextActiveElement\n\n        if (event.key === 'Home' || event.key === 'End') {\n          nextActiveElement = event.key === 'End' ? items.at(-1) : items[0]\n        } else {\n          nextActiveElement = getNextActiveElement(\n            items,\n            target,\n            event.key === 'ArrowDown' || event.key === 'ArrowRight',\n            true,\n          )\n        }\n\n        if (nextActiveElement) {\n          nextActiveElement.focus({ preventScroll: true })\n        }\n      }\n    }\n\n    return (\n      <div\n        className={classNames(\n          'nav',\n          {\n            [`nav-${layout}`]: layout,\n            [`nav-${variant}`]: variant,\n          },\n          className,\n        )}\n        role=\"tablist\"\n        onKeyDown={handleKeydown}\n        ref={forkedRef}\n        {...rest}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCTabList.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  layout: PropTypes.oneOf(['fill', 'justified']),\n  variant: PropTypes.oneOf(['pills', 'tabs', 'underline', 'underline-border']),\n}\n\nCTabList.displayName = 'CTabList'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { TabsContext } from './CTabs'\n\nexport interface CTabProps extends HTMLAttributes<HTMLButtonElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Item key.\n   */\n  itemKey: number | string\n}\n\nexport const CTab = forwardRef<HTMLButtonElement, CTabProps>(\n  ({ children, className, itemKey, ...rest }, ref) => {\n    const { _activeItemKey, setActiveItemKey, id } = useContext(TabsContext)\n\n    const isActive = () => itemKey === _activeItemKey\n\n    return (\n      <button\n        className={classNames(\n          'nav-link',\n          {\n            active: isActive(),\n          },\n          className,\n        )}\n        id={`${id}${itemKey}-tab`}\n        onClick={() => setActiveItemKey(itemKey)}\n        onFocus={() => setActiveItemKey(itemKey)}\n        role=\"tab\"\n        tabIndex={isActive() ? 0 : -1}\n        type=\"button\"\n        aria-controls={`${id}${itemKey}-tab-pane`}\n        aria-selected={isActive()}\n        ref={ref}\n        {...rest}\n      >\n        {children}\n      </button>\n    )\n  },\n)\n\nCTab.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n}\n\nCTab.displayName = 'CTab'\n","import React, { HTMLAttributes, forwardRef, useContext, useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { TabsContext } from './CTabs'\nimport { useForkedRef } from '../../hooks'\nimport { getTransitionDurationFromElement } from '../../utils'\n\nexport interface CTabPanelProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Item key.\n   */\n  itemKey: number | string\n  /**\n   * Callback fired when the component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * Enable fade in and fade out transition.\n   */\n  transition?: boolean\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CTabPanel = forwardRef<HTMLDivElement, CTabPanelProps>(\n  ({ children, className, itemKey, onHide, onShow, transition = true, visible, ...rest }, ref) => {\n    const { _activeItemKey, id } = useContext(TabsContext)\n\n    const tabPaneRef = useRef()\n    const forkedRef = useForkedRef(ref, tabPaneRef)\n\n    const [_visible, setVisible] = useState(visible || _activeItemKey === itemKey)\n\n    useEffect(() => {\n      visible !== undefined && setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      setVisible(_activeItemKey === itemKey)\n    }, [_activeItemKey])\n\n    return (\n      <Transition\n        in={_visible}\n        nodeRef={tabPaneRef}\n        onEnter={onShow}\n        onExit={onHide}\n        timeout={tabPaneRef.current ? getTransitionDurationFromElement(tabPaneRef.current) : 0}\n      >\n        {(state) => (\n          <div\n            className={classNames(\n              'tab-pane',\n              {\n                active: _visible,\n                fade: transition,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            id={`${id}${itemKey}-tab-pane`}\n            role=\"tabpanel\"\n            aria-labelledby={`${id}${itemKey}-tab`}\n            tabIndex={0}\n            ref={forkedRef}\n            {...rest}\n          >\n            {children}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCTabPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  transition: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCTabPanel.displayName = 'CTabPanel'\n","import React from 'react'\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CTab,\r\n  CTabContent,\r\n  CTabList,\r\n  CTabPanel,\r\n  CTabs,\r\n} from '@coreui/react'\r\nimport { DocsExample } from '../../../components'\r\n\r\nconst Navs = () => {\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Tabs</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              The basic React tabs example uses the <code>variant=&#34;tabs&#34;</code> props to\r\n              generate a tabbed interface.\r\n            </p>\r\n            <DocsExample href=\"components/tabs/#example\">\r\n              <CTabs activeItemKey=\"profile\">\r\n                <CTabList variant=\"tabs\">\r\n                  <CTab itemKey=\"home\">Home</CTab>\r\n                  <CTab itemKey=\"profile\">Profile</CTab>\r\n                  <CTab itemKey=\"contact\">Contact</CTab>\r\n                  <CTab disabled itemKey=\"disabled\">\r\n                    Disabled\r\n                  </CTab>\r\n                </CTabList>\r\n                <CTabContent>\r\n                  <CTabPanel className=\"p-3\" itemKey=\"home\">\r\n                    Home tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"p-3\" itemKey=\"profile\">\r\n                    Profile tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"p-3\" itemKey=\"contact\">\r\n                    Contact tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"p-3\" itemKey=\"disabled\">\r\n                    Disabled tab content\r\n                  </CTabPanel>\r\n                </CTabContent>\r\n              </CTabs>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Tabs</strong> <small>Unstyled</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              If you don’t provide the <code>variant</code> prop, the component will default to a\r\n              basic style.\r\n            </p>\r\n            <DocsExample href=\"components/tabs/#unstyled\">\r\n              <CTabs activeItemKey=\"profile\">\r\n                <CTabList>\r\n                  <CTab itemKey=\"home\">Home</CTab>\r\n                  <CTab itemKey=\"profile\">Profile</CTab>\r\n                  <CTab itemKey=\"contact\">Contact</CTab>\r\n                  <CTab disabled itemKey=\"disabled\">\r\n                    Disabled\r\n                  </CTab>\r\n                </CTabList>\r\n                <CTabContent>\r\n                  <CTabPanel className=\"p-3\" itemKey=\"home\">\r\n                    Home tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"p-3\" itemKey=\"profile\">\r\n                    Profile tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"p-3\" itemKey=\"contact\">\r\n                    Contact tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"p-3\" itemKey=\"disabled\">\r\n                    Disabled tab content\r\n                  </CTabPanel>\r\n                </CTabContent>\r\n              </CTabs>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Tabs</strong> <small>Pills</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Take that same code, but use <code>variant=&#34;pills&#34;</code> instead:\r\n            </p>\r\n            <DocsExample href=\"components/tabs/#unstyled\">\r\n              <CTabs activeItemKey={2}>\r\n                <CTabList variant=\"pills\">\r\n                  <CTab aria-controls=\"home-tab-pane\" itemKey={1}>\r\n                    Home\r\n                  </CTab>\r\n                  <CTab aria-controls=\"profile-tab-pane\" itemKey={2}>\r\n                    Profile\r\n                  </CTab>\r\n                  <CTab aria-controls=\"contact-tab-pane\" itemKey={3}>\r\n                    Contact\r\n                  </CTab>\r\n                  <CTab aria-controls=\"disabled-tab-pane\" disabled itemKey={4}>\r\n                    Disabled\r\n                  </CTab>\r\n                </CTabList>\r\n                <CTabContent>\r\n                  <CTabPanel className=\"p-3\" aria-labelledby=\"home-tab-pane\" itemKey={1}>\r\n                    Home tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"p-3\" aria-labelledby=\"profile-tab-pane\" itemKey={2}>\r\n                    Profile tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"p-3\" aria-labelledby=\"contact-tab-pane\" itemKey={3}>\r\n                    Contact tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"p-3\" aria-labelledby=\"disabled-tab-pane\" itemKey={4}>\r\n                    Disabled tab content\r\n                  </CTabPanel>\r\n                </CTabContent>\r\n              </CTabs>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Tabs</strong> <small>Underline</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Take that same code, but use <code>variant=&#34;underline&#34;</code> instead:\r\n            </p>\r\n            <DocsExample href=\"components/tabs/#unstyled\">\r\n              <CTabs activeItemKey={2}>\r\n                <CTabList variant=\"underline\">\r\n                  <CTab aria-controls=\"home-tab-pane\" itemKey={1}>\r\n                    Home\r\n                  </CTab>\r\n                  <CTab aria-controls=\"profile-tab-pane\" itemKey={2}>\r\n                    Profile\r\n                  </CTab>\r\n                  <CTab aria-controls=\"contact-tab-pane\" itemKey={3}>\r\n                    Contact\r\n                  </CTab>\r\n                  <CTab aria-controls=\"disabled-tab-pane\" disabled itemKey={4}>\r\n                    Disabled\r\n                  </CTab>\r\n                </CTabList>\r\n                <CTabContent>\r\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"home-tab-pane\" itemKey={1}>\r\n                    Home tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"profile-tab-pane\" itemKey={2}>\r\n                    Profile tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"contact-tab-pane\" itemKey={3}>\r\n                    Contact tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"disabled-tab-pane\" itemKey={4}>\r\n                    Disabled tab content\r\n                  </CTabPanel>\r\n                </CTabContent>\r\n              </CTabs>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Tabs</strong> <small>Underline border</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Take that same code, but use <code>variant=&#34;underline-border&#34;</code> instead:\r\n            </p>\r\n            <DocsExample href=\"components/tabs/#unstyled\">\r\n              <CTabs activeItemKey={2}>\r\n                <CTabList variant=\"underline-border\">\r\n                  <CTab aria-controls=\"home-tab-pane\" itemKey={1}>\r\n                    Home\r\n                  </CTab>\r\n                  <CTab aria-controls=\"profile-tab-pane\" itemKey={2}>\r\n                    Profile\r\n                  </CTab>\r\n                  <CTab aria-controls=\"contact-tab-pane\" itemKey={3}>\r\n                    Contact\r\n                  </CTab>\r\n                  <CTab aria-controls=\"disabled-tab-pane\" disabled itemKey={4}>\r\n                    Disabled\r\n                  </CTab>\r\n                </CTabList>\r\n                <CTabContent>\r\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"home-tab-pane\" itemKey={1}>\r\n                    Home tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"profile-tab-pane\" itemKey={2}>\r\n                    Profile tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"contact-tab-pane\" itemKey={3}>\r\n                    Contact tab content\r\n                  </CTabPanel>\r\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"disabled-tab-pane\" itemKey={4}>\r\n                    Disabled tab content\r\n                  </CTabPanel>\r\n                </CTabContent>\r\n              </CTabs>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Navs\r\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","const getTransitionDurationFromElement = (element: HTMLElement) => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let { transitionDuration, transitionDelay } = window.getComputedStyle(element)\n\n  const floatTransitionDuration = Number.parseFloat(transitionDuration)\n  const floatTransitionDelay = Number.parseFloat(transitionDelay)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n  transitionDelay = transitionDelay.split(',')[0]\n\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * 1000\n}\n\nexport default getTransitionDurationFromElement\n"],"names":["TabsContext","createContext","CTabs","forwardRef","_a","ref","children","activeItemKey","className","onChange","id","useId","_b","useState","_activeItemKey","setActiveItemKey","useEffect","React","Provider","value","classNames","propTypes","PropTypes","isRequired","displayName","CTabList","layout","variant","rest","__rest","tabListRef","useRef","forkedRef","useForkedRef","__assign","concat","role","onKeyDown","event","current","key","preventDefault","target","items","Array","from","querySelectorAll","nextActiveElement","at","getNextActiveElement","focus","preventScroll","CTab","itemKey","useContext","isActive","active","onClick","onFocus","tabIndex","type","CTabPanel","onHide","onShow","transition","visible","_c","tabPaneRef","_d","_visible","setVisible","undefined","Transition","in","nodeRef","onEnter","onExit","timeout","getTransitionDurationFromElement","state","fade","show","Navs","_jsxs","CRow","_jsx","CCol","xs","CCard","CCardHeader","CCardBody","DocsExample","href","disabled","CTabContent","as","Component","element","window","getComputedStyle","transitionDuration","transitionDelay","floatTransitionDuration","Number","parseFloat","floatTransitionDelay","split"],"sourceRoot":""}