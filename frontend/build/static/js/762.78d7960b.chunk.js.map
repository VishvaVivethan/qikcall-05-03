{"version":3,"file":"static/js/762.78d7960b.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/badge/CBadge.tsx","views/notifications/badges/Badges.js","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType, shapePropType, textColorsPropType } from '../../props'\nimport type { Colors, Shapes, TextColors } from '../../types'\n\nexport interface CBadgeProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Position badge in one of the corners of a link or button.\n   */\n  position?: 'top-start' | 'top-end' | 'bottom-end' | 'bottom-start'\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small.\n   */\n  size?: 'sm'\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n  /**\n   * Sets the text color of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: TextColors\n}\nexport const CBadge: PolymorphicRefForwardingComponent<'span', CBadgeProps> = forwardRef<\n  HTMLDivElement | HTMLSpanElement,\n  CBadgeProps\n>(\n  (\n    {\n      children,\n      as: Component = 'span',\n      className,\n      color,\n      position,\n      shape,\n      size,\n      textBgColor,\n      textColor,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <Component\n        className={classNames(\n          'badge',\n          {\n            [`bg-${color}`]: color,\n            'position-absolute translate-middle': position,\n            'top-0': position?.includes('top'),\n            'top-100': position?.includes('bottom'),\n            'start-100': position?.includes('end'),\n            'start-0': position?.includes('start'),\n            [`badge-${size}`]: size,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          shape,\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </Component>\n    )\n  },\n)\n\nCBadge.propTypes = {\n  as: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  position: PropTypes.oneOf(['top-start', 'top-end', 'bottom-end', 'bottom-start']),\n  shape: shapePropType,\n  size: PropTypes.oneOf(['sm']),\n  textBgColor: colorPropType,\n  textColor: textColorsPropType,\n}\n\nCBadge.displayName = 'CBadge'\n","import React from 'react'\r\nimport { CButton, CCard, CCardBody, CCardHeader, CCol, CBadge, CRow } from '@coreui/react'\r\nimport { DocsExample } from '../../../components'\r\n\r\nconst Badges = () => {\r\n  return (\r\n    <CRow>\r\n      <CCol lg={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Badges</strong> <small>Dismissing</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Bootstrap badge scale to suit the size of the parent element by using relative font\r\n              sizing and <code>em</code> units.\r\n            </p>\r\n            <DocsExample href=\"components/badge\">\r\n              <h1>\r\n                Example heading <CBadge color=\"secondary\">New</CBadge>\r\n              </h1>\r\n              <h2>\r\n                Example heading <CBadge color=\"secondary\">New</CBadge>\r\n              </h2>\r\n              <h3>\r\n                Example heading <CBadge color=\"secondary\">New</CBadge>\r\n              </h3>\r\n              <h4>\r\n                Example heading <CBadge color=\"secondary\">New</CBadge>\r\n              </h4>\r\n              <h5>\r\n                Example heading <CBadge color=\"secondary\">New</CBadge>\r\n              </h5>\r\n              <h6>\r\n                Example heading <CBadge color=\"secondary\">New</CBadge>\r\n              </h6>\r\n            </DocsExample>\r\n            <p className=\"text-body-secondary small\">\r\n              Badges can be used as part of links or buttons to provide a counter.\r\n            </p>\r\n            <DocsExample href=\"components/badge\">\r\n              <CButton color=\"primary\">\r\n                Notifications <CBadge color=\"secondary\">4</CBadge>\r\n              </CButton>\r\n            </DocsExample>\r\n            <p className=\"text-body-secondary small\">\r\n              Remark that depending on how you use them, badges may be complicated for users of\r\n              screen readers and related assistive technologies.\r\n            </p>\r\n            <p className=\"text-body-secondary small\">\r\n              Unless the context is clear, consider including additional context with a visually\r\n              hidden piece of additional text.\r\n            </p>\r\n            <DocsExample href=\"components/badge\">\r\n              <CButton color=\"primary\">\r\n                Profile <CBadge color=\"secondary\">9</CBadge>\r\n                <span className=\"visually-hidden\">unread messages</span>\r\n              </CButton>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol lg={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Badges</strong> <small>Contextual variations</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Add any of the below-mentioned <code>color</code> props to modify the presentation of\r\n              a badge.\r\n            </p>\r\n            <DocsExample href=\"components/badge#contextual-variations\">\r\n              <CBadge color=\"primary\">primary</CBadge>\r\n              <CBadge color=\"success\">success</CBadge>\r\n              <CBadge color=\"danger\">danger</CBadge>\r\n              <CBadge color=\"warning\">warning</CBadge>\r\n              <CBadge color=\"info\">info</CBadge>\r\n              <CBadge color=\"light\">light</CBadge>\r\n              <CBadge color=\"dark\">dark</CBadge>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <strong>React Badges</strong> <small>Pill badges</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-body-secondary small\">\r\n              Apply the <code>shape=&#34;rounded-pill&#34;</code> prop to make badges rounded.\r\n            </p>\r\n            <DocsExample href=\"components/badge#pill-badges\">\r\n              <CBadge color=\"primary\" shape=\"rounded-pill\">\r\n                primary\r\n              </CBadge>\r\n              <CBadge color=\"success\" shape=\"rounded-pill\">\r\n                success\r\n              </CBadge>\r\n              <CBadge color=\"danger\" shape=\"rounded-pill\">\r\n                danger\r\n              </CBadge>\r\n              <CBadge color=\"warning\" shape=\"rounded-pill\">\r\n                warning\r\n              </CBadge>\r\n              <CBadge color=\"info\" shape=\"rounded-pill\">\r\n                info\r\n              </CBadge>\r\n              <CBadge color=\"light\" shape=\"rounded-pill\">\r\n                light\r\n              </CBadge>\r\n              <CBadge color=\"dark\" shape=\"rounded-pill\">\r\n                dark\r\n              </CBadge>\r\n            </DocsExample>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Badges\r\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n"],"names":["CBadge","forwardRef","_a","ref","children","_c","as","Component","className","color","position","shape","size","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","concat","includes","propTypes","PropTypes","colorPropType","shapePropType","textColorsPropType","displayName","Badges","_jsxs","CRow","_jsx","CCol","lg","CCard","CCardHeader","CCardBody","DocsExample","href","CButton"],"sourceRoot":""}